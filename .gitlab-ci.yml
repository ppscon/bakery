image: docker:19.03.12

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"'
      when: never
    - when: always

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  CI_REGISTRY_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH
  CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE
  DEV_SERVER_HOST: 18.169.187.161
  DEV_ENDPOINT: http://18.169.187.161:3000
  STAGING_SERVER_HOST: 18.169.187.161
  STAGING_ENDPOINT: http://18.169.187.161:3001
  PROD_SERVER_HOST: 18.169.187.161
  PROD_ENDPOINT: http://18.169.187.161:3002
  SIGNATURE_FILE: "signature_file.txt"
  TIMESTAMP_FILE: "timestamp_file.txt"
  METADATA_ARTIFACT: "metadata_artifact"

stages:
  - test
  - build
  - security_scan
  - generate_sbom
  - deploy_dev
  - functional_tests
  - deploy_staging
  - performance_tests
  - prod_acceptance
  - mark_as_immutable
  - record_metadata
  - sign_image
  - verify
  - promote_to_immutable_repo
  - deploy_prod

run_unit_tests:
  image: node:17-alpine3.14
  stage: test
  cache:
    key: '$CI_COMMIT_REF_NAME'
    paths:
      - app/node_modules
  tags:
    - docker
    - ec2
    - remote
  before_script:
    - cd app
    - npm install
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - app/junit.xml
    reports:
      junit: app/junit.xml

sast:
  stage: test

build_image:
  image: docker:19.03.13 
  services:
    - docker:19.03.13-dind
  stage: build
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    DOCKER_BUILDKIT: 1
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - export PACKAGE_JSON_VERSION=$(cat app/package.json | jq -r .version)
    - echo $PACKAGE_JSON_VERSION.$CI_PIPELINE_IID > version-file.txt
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  after_script:
    - docker pull $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  artifacts:
    paths:
      - version-file.txt
  tags:
    - ec2
    - shell
    - remote



scan-job:
  image:
    name: registry.aquasec.com/scanner:2022.4
    entrypoint: [""]
  stage: security_scan
  variables:
    IMAGE_TAG: $CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA
  script:
    - /opt/aquasec/scannercli scan -H $AQUA_SERVER --token $AQUA_TOKEN --registry "glab2" $IMAGE_TAG --show-negligible --register-compliant --htmlfile $CI_PROJECT_DIR/aqua-scan.html >/dev/null
  artifacts:
    paths:
      - aqua-scan.html
  tags:
    - docker
    - ec2
    - remote

generate_sbom:
  stage: generate_sbom
  needs: ["scan-job"]
  image: aquasec/aqua-scanner
  script:
    - export BILLY_SERVER=https://billy.dev-aqua.codesec.aquasec.com
    - curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
    - curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
    - |
     if ! cat install.sh.checksum | sha256sum ; then
      echo "install.sh checksum failed"
      exit 1
     fi
     BINDIR="." sh install.sh
     rm install.sh install.sh.checksum
    - ./billy generate /
     --access-token $GITLAB_TOKEN /
     --aqua-key $AQUA_KEY /
     --aqua-secret $AQUA_SECRET /
     --cspm-url https://stage.api.cloudsploit.com /
     --artifact-path "$CI_PROJECT_DIR"
     --package-json
     --sast
     --reachability
    - export AQUA_KEY=$AQUA_KEY
    - export AQUA_SECRET=$AQUA_SECRET
    - export GITLAB_TOKEN=$GITLAB_TOKEN
    - export AQUA_URL=https://api.dev.supply-chain.cloud.aquasec.com
    - export CSPM_URL=https://stage.api.cloudsploit.com
    - export TRIVY_RUN_AS_PLUGIN=aqua
    - trivy fs --scanners config,vuln,secret .

  tags:
    - docker
    - ec2
    - remote


integration_tests:
  image: node:17-alpine3.14
  stage: build
  needs:
  - build_image
  tags:
    - docker
    - ec2
    - remote
  script:
    - echo "Placeholder for running integration tests."
    
push_image:
  stage: build
  dependencies:
    - build_image
  needs:
    - build_image
  before_script:
    - export IMAGE_TAG=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_TAG
  tags:
    - ec2
    - shell
    - remote
    
.deploy:
  stage: deploy
  needs:
    - scan-job
    - build_image
  dependencies:
    - build_image
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
    - export VERSION=$(cat version-file.txt)
  script:
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yaml ubuntu@$SERVER_HOST:/home/ubuntu
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@$SERVER_HOST "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      export COMPOSE_PROJECT_NAME=$DEPLOY_ENV &&
      export DC_IMAGE_NAME=$CI_REGISTRY_IMAGE &&
      export DC_IMAGE_TAG=$CI_COMMIT_SHORT_SHA &&
      export DC_APP_PORT=$APP_PORT &&
      echo \$DC_IMAGE_NAME &&
      echo \$DC_IMAGE_TAG &&
      docker-compose down && docker-compose up -d"
  tags:
    - ec2
    - shell
    - remote

deploy_dev:
  extends: .deploy
  stage: deploy_dev
  variables:
    SERVER_HOST: $DEV_SERVER_HOST
    DEPLOY_ENV: dev
    APP_PORT: 3000

run_functional_tests:
  stage: deploy_dev
  needs:
    - deploy_dev
  script:
    - apk --no-cache add curl
    - 'curl -f $DEV_ENDPOINT || exit 1'


deploy_staging:
  extends: .deploy
  stage: deploy_staging
  variables:
    SERVER_HOST: $STAGING_SERVER_HOST
    DEPLOY_ENV: staging
    APP_PORT: 3001

run_performance_tests:
  stage: deploy_staging
  needs:
    - deploy_staging
  script:
    - apk --no-cache add curl apache2-utils
    - ab -n 100 -c 10 $STAGING_ENDPOINT/


deploy_prod:
  extends: .deploy
  stage: deploy_prod
  needs:
    - acceptance_stage
    - aqua_security_guidelines
    - build_image
  variables:
    SERVER_HOST: $PROD_SERVER_HOST
    DEPLOY_ENV: prod
    APP_PORT: 3002
  when: manual

acceptance_stage:
  stage: prod_acceptance
  needs:
    - run_performance_tests
    - scan-job
    - generate_sbom
  script:
    - |
      echo "Reminder before deploying to Production:"
      echo "1. Code Quality: Ensure that code quality has been assessed and meets the team's quality metrics."
      echo "2. Unit Tests: Verify that all unit tests have passed."
      echo "3. Integration Tests: Check all integration tests have been completed successfully."
      echo "4. Security: Make sure all security scans have been passed and necessary security standards are met."
      echo "5. Manual Review: Confirm that the manual code review has been done by the team."
      echo "If all guidelines are met, proceed to prod-acceptance stage."

mark_as_immutable:
  stage: mark_as_immutable
  image: docker:19.03.12
  services:
    - name: docker:19.03.13-dind
      alias: docker
  script:
    - echo "Checking Docker version..."
    - docker --version
    - echo "Marking the image as immutable..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA-immutable
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA-immutable
    - echo "This image has been validated by Aqua Security and is free from known vulnerabilities."
  tags:
    - docker
    - ec2
    - remote


record_metadata:
  stage: record_metadata
  image: python:3.9
  script:
    - python3 --version
    - echo "Recording Metadata and Timestamp..."
    - date +%s > $TIMESTAMP_FILE
    - echo "PlaceholderSignature" > $SIGNATURE_FILE
    - python3 generate_metadata_artifact.py $SIGNATURE_FILE $TIMESTAMP_FILE $METADATA_ARTIFACT
  artifacts:
    paths:
      - ${METADATA_ARTIFACT}.json
      - ${METADATA_ARTIFACT}.html



sign_image:
  stage: sign_image
  image: docker:latest
  services:
    - docker:dind
  variables:
    COSIGN_YES: "true"
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  before_script:
    - apk add --update cosign
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    - IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA)
    - cosign sign $IMAGE_DIGEST

verify_image_signature:
  image: docker:latest  
  stage: verify
  services:
    - docker:dind
  variables:
    COSIGN_YES: "true"
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  before_script:
    - apk add --update cosign  
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA)
    - cosign verify "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" --certificate-identity "$CI_PROJECT_URL//.gitlab-ci.yml@refs/heads/$CI_COMMIT_BRANCH" --certificate-oidc-issuer "$CI_SERVER_URL"


promote_to_immutable_repo:
  stage: promote_to_immutable_repo
  image: docker:19.03.12
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - "docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    - "docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA-immutable"
    - "docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA-immutable"
    - 'echo "-------------------------------------------------"'
    - 'echo "IMAGE PROMOTION SUCCESSFUL: The image has been promoted to the immutable repository."'
    - 'echo "-------------------------------------------------"'
  tags:
    - docker
    - ec2
    - remote

# job: Aqua Security Guidelines
aqua_security_guidelines:
  stage: prod_acceptance
  needs:
    - acceptance_stage
  script:
    - |
      echo "Critical! Before deploying to production, ensure the following Aqua Security Runtime controls and best practices are applied:"
      echo "1. Drift Prevention: Validate that drift prevention is configured and active."
      echo "2. Risk Acceptance: Confirm that all risks are accepted in Aqua and set a resolution date for each."
      echo "3. Enforcement Mode: Verify that the policy enforcement mode is set to 'ENFORCE'."
      echo "4. SBOM: Review the Software Bill of Materials to ensure only approved and secure components are part of the build."
      echo "5. User Permissions: Double-check that least-privilege principles have been applied to all users and service accounts."
      echo "6. Vulnerability Scanning: Ensure that the latest vulnerability scans have been run and passed."
      echo "7. Image Signing: Verify that the image has been signed by an authorized entity."
      echo "8. Incident Response Plan: Confirm that an incident response plan is in place and up-to-date."
      echo "9. Network Policies: Validate that network segmentation and firewall rules have been properly configured."
      echo "10. Logging and Monitoring: Confirm that all required logging and monitoring integrations are functioning."
      echo "If all the guidelines are met, you may proceed with production deployment."


include:
  - template: Jobs/SAST.gitlab-ci.yml
