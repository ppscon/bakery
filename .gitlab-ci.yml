image: docker:19.03.12

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"'
      when: never
    - when: always

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  CI_REGISTRY_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH
  CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE
  DEV_SERVER_HOST: 18.169.187.161
  DEV_ENDPOINT: 18.169.187.161:3000
  STAGING_SERVER_HOST: 18.169.187.161
  STAGING_ENDPOINT: 18.169.187.161:3001
  PROD_SERVER_HOST: 18.169.187.161
  PROD_ENDPOINT: 18.169.187.161:3002

stages:
  - test
  - build
  - security_scan
  - generate_sbom
  - deploy_dev
  - functional_tests
  - deploy_staging
  - performance_tests
  - prod_acceptance
  - deploy_prod

run_unit_tests:
  image: node:17-alpine3.14
  stage: test
  cache:
    key: '$CI_COMMIT_REF_NAME'
    paths:
      - app/node_modules
  tags:
    - docker
    - ec2
    - remote
  before_script:
    - cd app
    - npm install
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - app/junit.xml
    reports:
      junit: app/junit.xml

sast:
  stage: test

services:
  - docker:19.03.12-dind

build_image:
  image: docker:19.03.13 
  services:
    - docker:19.03.13-dind
  stage: build
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  
  before_script:
    - export PACKAGE_JSON_VERSION=$(cat app/package.json | jq -r .version)
    - echo $PACKAGE_JSON_VERSION.$CI_PIPELINE_IID > version-file.txt
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  artifacts:
    paths:
      - version-file.txt
  tags:
    - ec2
    - shell
    - remote

scan-job:
  image:
    name: registry.aquasec.com/scanner:2022.4
    entrypoint: [""]
  stage: security_scan
  variables:
    IMAGE_TAG: $CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA
  script:
    - /opt/aquasec/scannercli scan -H $AQUA_SERVER --token $AQUA_TOKEN --registry "glab" $IMAGE_TAG --show-negligible --register-compliant --htmlfile $CI_PROJECT_DIR/aqua-scan.html >/dev/null
  artifacts:
    paths:
      - aqua-scan.html
  tags:
    - docker
    - ec2
    - remote

generate_sbom:
  stage: generate_sbom
  needs: ["scan-job"]
  image: aquasec/aqua-scanner
  script:
    - export AQUA_KEY=$AQUA_KEY
    - export AQUA_SECRET=$AQUA_SECRET
    - export GITLAB_TOKEN=$GITLAB_TOKEN
    - export AQUA_URL=https://api.dev.supply-chain.cloud.aquasec.com
    - export CSPM_URL=https://stage.api.cloudsploit.com
    - export TRIVY_RUN_AS_PLUGIN=aqua
    - trivy fs --scanners config,vuln,secret .
  tags:
    - docker
    - ec2
    - remote

push_image:
  stage: build
  dependencies:
    - build_image
  needs:
    - build_image
  before_script:
    - export IMAGE_TAG=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_TAG
  tags:
    - ec2
    - shell
    - remote
    
.deploy:
  stage: deploy
  needs:
    - scan-job
    - build_image
  dependencies:
    - build_image
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
    - export VERSION=$(cat version-file.txt)
  script:
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yaml ubuntu@$SERVER_HOST:/home/ubuntu
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@$SERVER_HOST "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      export COMPOSE_PROJECT_NAME=$DEPLOY_ENV &&
      export DC_IMAGE_NAME=$CI_REGISTRY_IMAGE &&
      export DC_IMAGE_TAG=$CI_COMMIT_SHORT_SHA &&
      export DC_APP_PORT=$APP_PORT &&
      echo \$DC_IMAGE_NAME &&
      echo \$DC_IMAGE_TAG &&
      docker-compose down && docker-compose up -d"
  tags:
    - ec2
    - shell
    - remote

deploy_dev:
  extends: .deploy
  stage: deploy_dev
  variables:
    SERVER_HOST: $DEV_SERVER_HOST
    DEPLOY_ENV: dev
    APP_PORT: 3000

run_functional_tests:
  stage: deploy_dev
  needs:
    - deploy_dev
  script:
    - apk --no-cache add curl
    - 'curl -f http://$DEV_ENDPOINT || exit 1'


deploy_staging:
  extends: .deploy
  stage: deploy_staging
  variables:
    SERVER_HOST: $STAGING_SERVER_HOST
    DEPLOY_ENV: staging
    APP_PORT: 3001

run_performance_tests:
  stage: deploy_staging
  needs:
    - deploy_staging
  script:
    - apk --no-cache add curl apache2-utils
    - ab -n 100 -c 10 http://$STAGING_ENDPOINT/


deploy_prod:
  extends: .deploy
  stage: deploy_prod
  needs:
    - acceptance_stage
    - aqua_security_guidelines
    - build_image
  variables:
    SERVER_HOST: $PROD_SERVER_HOST
    DEPLOY_ENV: prod
    APP_PORT: 3002
  when: manual

acceptance_stage:
  stage: prod_acceptance
  needs:
    - run_performance_tests
    - scan-job
    - generate_sbom
  script:
    - |
      echo "Reminder before deploying to Production:"
      echo "1. Code Quality: Ensure that code quality has been assessed and meets the team's quality metrics."
      echo "2. Unit Tests: Verify that all unit tests have passed."
      echo "3. Integration Tests: Check all integration tests have been completed successfully."
      echo "4. Security: Make sure all security scans have been passed and necessary security standards are met."
      echo "5. Manual Review: Confirm that the manual code review has been done by the team."
      echo "If all guidelines are met, proceed with production deployment."

# job: Aqua Guidelines
aqua_security_guidelines:
  stage: prod_acceptance
  needs:
    - acceptance_stage
  script:
    - |
      echo "Critical! before deploying to production, ensure the following Aqua Security Runtime controls are applied:"
      echo "1. Drift Prevention: Check if drift prevention is configured and working correctly."
      echo "2. Any Risks are accepted in the aqua and a fix date (if available) has been agreed."
      echo "3. Verify 'ENFORCE' is selected."
      echo "4. Finally check, the Software Bill of Materials (SBOM) to confirm that only approved and secure software components, libraries, and dependencies are part of the build."
      echo "If all the guidelines are met, you can proceed with production deployment."

include:
  - template: Jobs/SAST.gitlab-ci.yml
