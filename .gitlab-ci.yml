image: docker:19.03.12

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"'
      when: never
    - when: always

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  CI_REGISTRY_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH
  CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE
  DEV_SERVER_HOST: 18.169.187.161
  DEV_ENDPOINT: 18.169.187.161:3000
  STAGING_SERVER_HOST: 18.169.187.161
  STAGING_ENDPOINT: 18.169.187.161:3001
  PROD_SERVER_HOST: 18.169.187.161
  PROD_ENDPOINT: 18.169.187.161:3002

stages:
  - test
  - build
  - scan
  - generate_sbom
  - deploy_dev
  - functional_tests
  - deploy_staging
  - performance_tests
  - deploy_prod

run_unit_tests:
  image: node:17-alpine3.14
  stage: test
  cache:
    key: '$CI_COMMIT_REF_NAME'
    paths:
      - app/node_modules
  tags:
    - docker
    - ec2
    - remote
  before_script:
    - cd app
    - npm install
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - app/junit.xml
    reports:
      junit: app/junit.xml

sast:
  stage: test

services:
  - docker:19.03.12-dind

build_image:
  image: docker:19.03.13 
  services:
    - docker:19.03.13-dind
  stage: build
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  
  before_script:
    - export PACKAGE_JSON_VERSION=$(cat app/package.json | jq -r .version)
    - echo $PACKAGE_JSON_VERSION.$CI_PIPELINE_IID > version-file.txt
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  artifacts:
    paths:
      - version-file.txt
  tags:
    - ec2
    - shell
    - remote

scan-job:
  image:
    name: registry.aquasec.com/scanner:2022.4
    entrypoint: [""]
  stage: scan
  variables:
    IMAGE_TAG: $CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA
  script:
    - /opt/aquasec/scannercli scan -H $AQUA_SERVER --token $AQUA_TOKEN --registry "glab" $IMAGE_TAG --show-negligible --register-compliant --htmlfile $CI_PROJECT_DIR/aqua-scan.html >/dev/null
  artifacts:
    paths:
      - aqua-scan.html
  tags:
    - docker
    - ec2
    - remote

generate_sbom:
  stage: generate_sbom
  needs: ["scan-job"]
  image: aquasec/aqua-scanner
  script:
    - export AQUA_KEY=$AQUA_KEY
    - export AQUA_SECRET=$AQUA_SECRET
    - export GITLAB_TOKEN=$GITLAB_TOKEN
    - export AQUA_URL=https://api.dev.supply-chain.cloud.aquasec.com
    - export CSPM_URL=https://stage.api.cloudsploit.com
    - export TRIVY_RUN_AS_PLUGIN=aqua
    - trivy fs --scanners config,vuln,secret .
  tags:
    - docker
    - ec2
    - remote

push_image:
  stage: build
  dependencies:
    - build_image
  needs:
    - build_image
  before_script:
    - export IMAGE_TAG=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_TAG
  tags:
    - ec2
    - shell
    - remote
    
# deploy_dev:
#   stage: deploy_dev
#   dependencies:
#     - build_image
#   before_script:
#     - chmod 400 $SSH_PRIVATE_KEY
#     - export VERSION=$(cat version-file.txt)
#   script:
#     - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yaml ubuntu@$DEV_SERVER_HOST:/home/ubuntu
#     - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@$DEV_SERVER_HOST "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
#       export COMPOSE_PROJECT_NAME=dev &&
#       export DC_IMAGE_NAME=$CI_REGISTRY_IMAGE &&
#       export DC_IMAGE_TAG=$CI_COMMIT_SHORT_SHA &&
#       export DC_APP_PORT=3000 &&
#       echo \$DC_IMAGE_NAME &&
#       echo \$DC_IMAGE_TAG &&
#       docker-compose down && docker-compose up -d"
#   tags:
#     - ec2
#     - shell
#     - remote

.deploy_template: &deploy_template
  dependencies:
    - build_image
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
    - export VERSION=$(cat version-file.txt)
  script:
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yaml ubuntu@$SERVER_HOST:/home/ubuntu
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@$SERVER_HOST "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      export DC_IMAGE_NAME=$CI_REGISTRY_IMAGE &&
      export DC_IMAGE_TAG=$CI_COMMIT_SHORT_SHA &&
      echo \$DC_IMAGE_NAME &&
      echo \$DC_IMAGE_TAG &&
      (docker ps -a | grep ubuntu_app_1) && docker rm -f $(docker ps -aq) || echo 'No existing container' &&
      DC_APP_PORT=$DC_APP_PORT docker-compose down && DC_APP_PORT=$DC_APP_PORT docker-compose up -d"
  tags:
    - ec2
    - shell
    - remote



deploy_dev:
  stage: deploy_dev
  variables:
    SERVER_HOST: $DEV_SERVER_HOST
    COMPOSE_PROJECT_NAME: dev
    DC_APP_PORT: 3000
  <<: *deploy_template

deploy_staging:
  stage: deploy_staging
  variables:
    SERVER_HOST: $STAGING_SERVER_HOST
    COMPOSE_PROJECT_NAME: staging
    DC_APP_PORT: 3001
  <<: *deploy_template

deploy_prod:
  stage: deploy_prod
  variables:
    SERVER_HOST: $PROD_SERVER_HOST
    COMPOSE_PROJECT_NAME: prod
    DC_APP_PORT: 3002
  <<: *deploy_template


include:
  - template: Jobs/SAST.gitlab-ci.yml