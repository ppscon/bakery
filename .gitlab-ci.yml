workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

variables:
  IMAGE_NAME: registry.gitlab.com/pp-aq-ms/bakery-demo
  DEV_SERVER_HOST: 18.169.187.161
  DEV_ENDPOINT: 18.169.187.161:3000
  STAGING_SERVER_HOST: 18.169.187.161
  STAGING_ENDPOINT: 18.169.187.161:3001
  PROD_SERVER_HOST: 18.169.187.161
  PROD_ENDPOINT: 18.169.187.161:3002

stages:
  - test
  - build
  - scan
  - generate_sbom
  - deploy_dev
  - functional_tests
  - deploy_staging
  - performance_tests
  - deploy_prod

run_unit_tests:
  image: node:17-alpine3.14
  stage: test
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - app/node_modules
  tags:
    - docker
    - ec2
    - remote
  before_script:
    - cd app
    - npm install
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - app/junit.xml
    reports:
      junit: app/junit.xml

sast:
  stage: test

build_image:
  stage: build
  tags:
    - ec2
    - shell
    - remote
  before_script:
    - export PACKAGE_JSON_VERSION=$(cat app/package.json | jq -r .version)
    - export VERSION=$PACKAGE_JSON_VERSION.$CI_PIPELINE_IID
    - echo $VERSION > version-file.txt
  script:
    - docker build -t $IMAGE_NAME:$VERSION .
  artifacts:
    paths:
      - version-file.txt

scan-job:
  image:
    name: registry.aquasec.com/scanner:2022.4
    entrypoint: [""]
  stage: scan
  variables:
    IMAGE_TAG: latest
  script:
    - /opt/aquasec/scannercli scan -H $AQUA_SERVER --token $AQUA_TOKEN --registry "bakery-glab" $IMAGE_TAG --show-negligible --register-compliant --htmlfile $CI_PROJECT_DIR/aqua-scan.html >/dev/null
  artifacts:
    paths:
      - aqua-scan.html
  tags:
    - docker
    - ec2
    - remote

generate_sbom:
  stage: generate_sbom
  needs: ["scan-job"]
  image: aquasec/aqua-scanner
  script:
    - export AQUA_KEY=$AQUA_KEY
    - export AQUA_SECRET=$AQUA_SECRET
    - export GITLAB_TOKEN=$GITLAB_TOKEN
    - export AQUA_URL=https://api.dev.supply-chain.cloud.aquasec.com
    - export CSPM_URL=https://stage.api.cloudsploit.com
    - export TRIVY_RUN_AS_PLUGIN=aqua
    - trivy fs --scanners config,vuln,secret .
  tags:
    - docker
    - ec2
    - remote  
push_image:
  stage: build
  dependencies:
    - build_image
  needs:
    - build_image
  tags:
    - ec2
    - shell
    - remote
  before_script:
    - export VERSION=$(cat version-file.txt)
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_NAME:$VERSION

.deploy:
  tags: 
    - ec2
    - shell
    - remote
  dependencies:
    - build_image
  variables:
    SSH_KEY: ""
    SERVER_HOST: ""
    DEPLOY_ENV: ""
    APP_PORT: ""
    ENDPOINT: ""
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
    - export VERSION=$(cat version-file.txt)
  script:
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yaml ubuntu@$SERVER_HOST:/home/ubuntu
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@$SERVER_HOST "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&

        export COMPOSE_PROJECT_NAME=$DEPLOY_ENV
        export DC_IMAGE_NAME=$IMAGE_NAME &&
        export DC_IMAGE_TAG=$VERSION &&
        export DC_APP_PORT=$APP_PORT

        docker-compose down &&
        docker-compose up -d"
  environment:
    name: $DEPLOY_ENV
    url: $ENDPOINT

deploy_to_dev:
  extends: .deploy
  stage: deploy_dev
  needs: 
    - build_image
  variables:
    SSH_KEY: $SSH_PRIVATE_KEY
    SERVER_HOST: $DEV_SERVER_HOST
    DEPLOY_ENV: development
    APP_PORT: 3000
    ENDPOINT: $DEV_ENDPOINT


run_functional_tests:
  stage: deploy_dev
  needs:
    - deploy_to_dev
  script:
    - 'curl -f http://$DEV_ENDPOINT || exit 1'
  only:
    - branches


deploy_to_staging:
  extends: .deploy
  stage: deploy_staging
  needs: 
    - build_image
    - run_functional_tests
  variables:
    SSH_KEY: $SSH_PRIVATE_KEY
    SERVER_HOST: $STAGING_SERVER_HOST
    DEPLOY_ENV: staging
    APP_PORT: 3001
    ENDPOINT: $STAGING_ENDPOINT

run_performance_tests:
  stage: deploy_staging
  needs:
    - deploy_to_staging
  script:
    - apt-get update -qq && apt-get install -y apache2-utils
    - ab -n 100 -c 10 http://$STAGING_ENDPOINT/
  only:
    - branches


deploy_to_prod:
  extends: .deploy
  stage: deploy_prod
  needs:
    - build_image
    - run_performance_tests
  variables:
    SSH_KEY: $SSH_PRIVATE_KEY
    SERVER_HOST: $PROD_SERVER_HOST
    DEPLOY_ENV: production
    APP_PORT: 3002
    ENDPOINT: $PROD_ENDPOINT
  when: manual

include:
  - template: Jobs/SAST.gitlab-ci.yml
