name: NGINX CI/CD Pipeline with Aqua Security Scan and SBOM

on:
  push:
    branches:
      - main

jobs:
#  run_unit_tests:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#      - name: Setup Node.js environment
#        uses: actions/setup-node@v2
#        with:
#          node-version: '16'
#      - run: npm install
#        working-directory: ./app
#      - run: npm test
#        working-directory: ./app

  build_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: docker-login
        run: echo "${{ secrets.CI_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and Push NGINX Docker Image
        run: |
          IMAGE_NAME="nginx-image"
          docker build -f Dockerfile.NGINX --label "com.aqua.security.policy=immutable" -t ghcr.io/${{ github.repository }}/$IMAGE_NAME:${{ github.sha }} .
          docker push ghcr.io/${{ github.repository }}/$IMAGE_NAME:${{ github.sha }}

  aqua_scan:
      runs-on: ubuntu-latest
      needs: build_image
      env:
        DOCKER_AUTH_CONFIG: ${{ secrets.DOCKER_AUTH_CONFIG }}
        IMAGE_NAME: "nginx-image"
      steps:
        - uses: actions/checkout@v2
        - run: echo $DOCKER_AUTH_CONFIG > /home/runner/.docker/config.json
        - id: docker-pull-scanner
          run: docker pull registry.aquasec.com/scanner:2022.4
        - name: Run Aqua Security Scan
          run: |
            IMAGE_TAG=ghcr.io/${{ github.repository }}/$IMAGE_NAME:${{ github.sha }}
            docker run --rm -v $(pwd)/artifacts:/artifacts --entrypoint="" registry.aquasec.com/scanner:2022.4 /opt/aquasec/scannercli scan -H ${{ secrets.AQUA_SERVER }} --token ${{ secrets.AQUA_TOKEN }} --registry "Github" $IMAGE_TAG --show-negligible --register-compliant --htmlfile /artifacts/aqua-scan.html --jsonfile /artifacts/aqua-scan.json
        - name: Upload Aqua Reports as Artifacts
          if: always()  # Ensures this step runs even if previous steps fail
          uses: actions/upload-artifact@v2
          with:
            name: aqua-reports
            path: artifacts/




  assign_task:
    runs-on: ubuntu-latest
    needs: aqua_scan
    if: always()  # This ensures the job runs even if aqua_scan fails
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install requests
        run: pip install requests
      - name: Run assign task script
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: python ci_scripts/assign_task.py

  notify_teams:
    runs-on: ubuntu-latest
    needs: assign_task
    if: always()  # This ensures the job runs even if assign_task fails
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Download Aqua Reports
        uses: actions/download-artifact@v2
        with:
          name: aqua-reports
          path: artifacts/
      - name: Install requests
        run: pip install requests
      - name: Notify Teams
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: python ci_scripts/assign_task.py

  generate_sbom:
    runs-on: ubuntu-latest
    needs: [aqua_scan]
    container:
      image: aquasec/aqua-scanner:latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Generate SBOM using Aqua
      run: |
        # Set Billy server URL
        export BILLY_SERVER=https://billy.dev-aqua.codesec.aquasec.com

        # Download and verify install script
        curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
        curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
        if ! cat install.sh.checksum | sha256sum ; then
          echo "install.sh checksum failed"
          exit 1
        fi

        # Install Billy
        BINDIR="." sh install.sh
        rm install.sh install.sh.checksum

        # Generate SBOM
        ./billy generate \
          --access-token "${{ secrets.GITHUB_TOKEN }}" \
          --aqua-key "${{ secrets.AQUA_KEY }}" \
          --aqua-secret "${{ secrets.AQUA_SECRET }}" \
          --cspm-url https://stage.api.cloudsploit.com \
          --artifact-path "$GITHUB_WORKSPACE" \
          --package-json \
          --sast \
          --reachability

  sign_image:
    runs-on: ubuntu-latest
    needs: generate_sbom
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.1.2
    - name: Docker Login
      run: echo "${{ secrets.CI_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
    - name: Pull Docker Image
      run: docker pull ghcr.io/${{ github.repository }}/nginx-image:${{ github.sha }}
    - name: Save Cosign Private Key
      run: echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
    - name: Sign the Docker Image
      run: |
        IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/${{ github.repository }}/nginx-image:${{ github.sha }})
        cosign sign --key cosign.key $IMAGE_DIGEST

  verify_image:
    runs-on: ubuntu-latest
    needs: sign_image # Ensure this job runs after the image has been signed
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Install Cosign
      - name: Install Cosign
        run: |
          wget https://github.com/sigstore/cosign/releases/download/v1.3.0/cosign-linux-amd64
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign

      # Docker Login
      - name: Docker Login
        run: echo "${{ secrets.CI_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Pull the Docker Image
      - name: Pull Docker Image
        run: docker pull ghcr.io/${{ github.repository }}/nginx-image:${{ github.sha }}

      # Save the Cosign Public Key
      - name: Save Cosign Public Key
        run: echo "${{ secrets.COSIGN_PUBLIC_KEY }}" > cosign.pub

      # Verify the Docker Image
      - name: Verify the Docker Image
        run: |
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/${{ github.repository }}/nginx-image:${{ github.sha }})
          cosign verify --key cosign.pub $IMAGE_DIGEST




  record_metadata:
      runs-on: ubuntu-latest
      needs: verify_image
      container:
        image: python:3.9
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Generate Timestamp and Signature Placeholder
          run: |
            date +%s > timestamp_file.txt
            echo "PlaceholderSignature" > signature_file.txt  # This will act as a placeholder

        - name: Run Python Script to Generate Metadata
          run: python3 ci_scripts/generate_metadata_artifact.py signature_file.txt timestamp_file.txt metadata_artifact  # Added signature_file.txt as a placeholder

        - name: Upload Metadata Artifact
          uses: actions/upload-artifact@v2
          with:
            name: metadata-artifact
            path: |
              metadata_artifact.json
              metadata_artifact.html


  publish_to_gh_pages:
        runs-on: ubuntu-latest
        needs: record_metadata # Assuming this job runs after metadata recording
        steps:
          - name: Checkout code
            uses: actions/checkout@v2

          - name: Download Metadata Artifact
            uses: actions/download-artifact@v2
            with:
              name: metadata-artifact
              path: ./metadata

          - name: Deploy to GitHub Pages
            uses: peaceiris/actions-gh-pages@v3
            with:
              github_token: ${{ secrets.CI_TOKEN }}
              publish_dir: ./metadata
              keep_files: true
              publish_branch: gh-pages

  promote_to_aws_ecr:
    runs-on: ubuntu-latest
    needs: publish_to_gh_pages  # Add other dependencies as needed
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Docker login to GHCR
    - name: Docker Login to GHCR
      run: echo "${{ secrets.CI_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    # Pull the image from GitHub Container Registry
    - name: Pull Docker Image from GHCR
      run: docker pull ghcr.io/ppscon/bakery/bakery-app:${{ github.sha }}

    # Tag and Push the image to AWS ECR
    - name: Tag and Push to AWS ECR
      run: |
        docker tag ghcr.io/ppscon/bakery/bakery-app:${{ github.sha }} 633291361733.dkr.ecr.eu-west-2.amazonaws.com/image-bakery:${{ github.sha }}
        aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 633291361733.dkr.ecr.eu-west-2.amazonaws.com
        docker push 633291361733.dkr.ecr.eu-west-2.amazonaws.com/image-bakery:${{ github.sha }}


