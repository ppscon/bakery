#!/bin/bash
# Test the demo functionality without interactive prompts
# This script verifies that the demo will work correctly

set -e  # Exit on any error
DEMO_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPTS_DIR="$DEMO_DIR/scripts"
DEMO_DATA_DIR="$DEMO_DIR/demo-data"
REPORT_DIR="$DEMO_DATA_DIR/reports"

echo "=== Testing Demo Functionality ==="

# Create directories
mkdir -p "$DEMO_DATA_DIR/reports/original"
mkdir -p "$DEMO_DATA_DIR/reports/filtered"
mkdir -p "$DEMO_DATA_DIR/reports/previous"

# Copy report if needed
if [ ! -f "$DEMO_DATA_DIR/reports/original/aqua-scan.json" ]; then
    if [ -f "$DEMO_DIR/../Aqua-Reports/aqua-scan.json" ]; then
        cp "$DEMO_DIR/../Aqua-Reports/aqua-scan.json" "$DEMO_DATA_DIR/reports/original/"
        echo "Copied report from Aqua-Reports directory"
    elif [ -f "$DEMO_DIR/examples/input/aqua-scan.json" ]; then
        cp "$DEMO_DIR/examples/input/aqua-scan.json" "$DEMO_DATA_DIR/reports/original/"
        echo "Copied report from examples directory"
    else
        echo "No sample report found. Please add an Aqua scan report."
        exit 1
    fi
fi

echo "1. Testing severity filtering..."
python3 "$SCRIPTS_DIR/filter_for_splunk.py" \
    "$DEMO_DATA_DIR/reports/original/aqua-scan.json" \
    "$DEMO_DATA_DIR/reports/filtered/severity-filtered.json" \
    --min-severity 7.0

# Get statistics for display
TOTAL_VULNS=$(jq -r '.filtering_summary.total_vulnerabilities' "$DEMO_DATA_DIR/reports/filtered/severity-filtered_summary.json")
INCLUDED_VULNS=$(jq -r '.filtering_summary.vulnerabilities_included' "$DEMO_DATA_DIR/reports/filtered/severity-filtered_summary.json")
REDUCTION=$(jq -r '.filtering_summary.size_reduction.reduction_percentage' "$DEMO_DATA_DIR/reports/filtered/severity-filtered_summary.json")

echo " - Original vulnerabilities: $TOTAL_VULNS"
echo " - High-severity vulnerabilities: $INCLUDED_VULNS"
echo " - Data reduction: $REDUCTION%"

# For delta demo, we need to add a vulnerability to the original report first
echo "2. Creating modified report with a new vulnerability..."
# Get the original report
cp "$DEMO_DATA_DIR/reports/original/aqua-scan.json" "$DEMO_DATA_DIR/reports/previous/aqua-scan.json"

# Create a modified version with a "new" vulnerability
jq '.resources[0].vulnerabilities += [{"name": "CVE-2025-DEMO-001", "severity": "critical", "score": 9.8, "description": "Demo vulnerability for delta reporting", "solution": "Upgrade to newest version"}]' \
  "$DEMO_DATA_DIR/reports/original/aqua-scan.json" > "$DEMO_DATA_DIR/reports/original/aqua-scan-with-new.json"

echo "3. Testing delta reporting..."
python3 "$SCRIPTS_DIR/filter_for_splunk.py" \
    "$DEMO_DATA_DIR/reports/original/aqua-scan-with-new.json" \
    "$DEMO_DATA_DIR/reports/filtered/delta-filtered.json" \
    --min-severity 7.0 \
    --delta-only \
    --previous-scan "$DEMO_DATA_DIR/reports/previous/aqua-scan.json"

# Get statistics for display
TOTAL_VULNS=$(jq -r '.filtering_summary.total_vulnerabilities' "$DEMO_DATA_DIR/reports/filtered/delta-filtered_summary.json")
INCLUDED_VULNS=$(jq -r '.filtering_summary.vulnerabilities_included' "$DEMO_DATA_DIR/reports/filtered/delta-filtered_summary.json")

echo " - Total vulnerabilities: $TOTAL_VULNS"
echo " - New vulnerabilities detected: $INCLUDED_VULNS"

# Check if we can access the demo vulnerability
NEW_VULN_NAME=$(jq -r '.resources[0].vulnerabilities[0].name' "$DEMO_DATA_DIR/reports/filtered/delta-filtered.json" 2>/dev/null || echo "None")
if [ "$NEW_VULN_NAME" != "None" ] && [ "$NEW_VULN_NAME" == "CVE-2025-DEMO-001" ]; then
    echo " - Successfully detected new demo vulnerability: $NEW_VULN_NAME"
    VULN_DETAILS=$(jq -r '.resources[0].vulnerabilities[0] | "Score: " + (.score|tostring) + ", Severity: " + .severity' "$DEMO_DATA_DIR/reports/filtered/delta-filtered.json")
    echo " - Details: $VULN_DETAILS"
else
    echo " - Warning: Could not detect the new demo vulnerability properly"
    echo " - This may be because the vulnerability wasn't properly added or the delta comparison didn't work"
    echo " - For the actual demo, we'll ensure this works correctly"
fi

echo "4. Testing Splunk event format..."
if [ -f "$DEMO_DATA_DIR/reports/filtered/severity-filtered_splunk.json" ]; then
    EVENT_COUNT=$(wc -l < "$DEMO_DATA_DIR/reports/filtered/severity-filtered_splunk.json")
    echo " - Generated $EVENT_COUNT Splunk events"
    
    # Show a sample event
    echo " - Sample event format:"
    head -n1 "$DEMO_DATA_DIR/reports/filtered/severity-filtered_splunk.json" | jq '.' | head -5
    echo "   ..."
else
    echo " - Error: Splunk event file not created"
fi

echo "=== Demo Test Complete ==="
echo "The demo script should work correctly for your customer presentation." 