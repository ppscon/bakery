#!/usr/bin/env python3
import http.server
import socketserver
import json
import sys
from datetime import datetime

PORT = 8088
OUTPUT_FILE = "mock_splunk_received.json"

class MockSplunkHandler(http.server.BaseHTTPRequestHandler):
    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length).decode('utf-8')
        
        # Log the request
        print(f"\n[{datetime.now()}] Received request to {self.path}")
        print(f"Headers: {self.headers}")
        
        # Process each line as a separate event
        events = []
        for line in post_data.strip().split('\n'):
            try:
                event = json.loads(line)
                events.append(event)
                print(f"Event received: {json.dumps(event['event']['vulnerability_id'])}")
            except json.JSONDecodeError:
                print(f"Error parsing JSON: {line}")
        
        # Save received events to file
        try:
            with open(OUTPUT_FILE, 'a') as f:
                f.write(post_data + "\n")
            print(f"Saved {len(events)} events to {OUTPUT_FILE}")
        except Exception as e:
            print(f"Error saving events: {str(e)}")
        
        # Send a Splunk-like success response
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        response = {"text": "Success", "code": 0}
        self.wfile.write(json.dumps(response).encode('utf-8'))

    def log_message(self, format, *args):
        # Suppress default logging
        return

if __name__ == "__main__":
    # Clear the output file
    with open(OUTPUT_FILE, 'w') as f:
        f.write("")
    
    print(f"Starting mock Splunk HEC server on port {PORT}")
    print(f"Received events will be saved to {OUTPUT_FILE}")
    print("Press Ctrl+C to stop the server")
    
    try:
        with socketserver.TCPServer(("", PORT), MockSplunkHandler) as httpd:
            print(f"Server running at http://localhost:{PORT}")
            httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nShutting down server")
        sys.exit(0) 