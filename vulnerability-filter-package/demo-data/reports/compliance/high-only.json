{
  "scan_info": {
    "image": "ppscon/bakery/bakery-app:b4b145babc303b7ab31b80674c337af1cef9243d",
    "registry": "Github",
    "scan_date": {
      "seconds": 1747130708,
      "nanos": 284319701
    }
  },
  "vulnerabilities": [
    {
      "cve_id": "CVE-2023-45133",
      "severity": "high",
      "score": 8.8,
      "description": "Babel is a compiler for writingJavaScript. In `@babel/traverse` prior to versions 7.23.2 and 8.0.0-alpha.4 and all versions of `babel-traverse`, using Babel to compile code that was specifically crafted by an attacker can lead to arbitrary code execution during compilation, when using plugins that rely on the `path.evaluate()`or `path.evaluateTruthy()` internal Babel methods. Known affected plugins are `@babel/plugin-transform-runtime`; `@babel/preset-env` when using its `useBuiltIns` option; and any \"polyfill provider\" plugin that depends on `@babel/helper-define-polyfill-provider`, such as `babel-plugin-polyfill-corejs3`, `babel-plugin-polyfill-corejs2`, `babel-plugin-polyfill-es-shims`, `babel-plugin-polyfill-regenerator`. No other plugins under the `@babel/` namespace are impacted, but third-party plugins might be. Users that only compile trusted code are not impacted. The vulnerability has been fixed in `@babel/traverse@7.23.2` and `@babel/traverse@8.0.0-alpha.4`. Those who cannot upgrade `@babel/traverse` and are using one of the affected packages mentioned above should upgrade them to their latest version to avoid triggering the vulnerable code path in affected `@babel/traverse` versions: `@babel/plugin-transform-runtime` v7.23.2, `@babel/preset-env` v7.23.2, `@babel/helper-define-polyfill-provider` v0.4.3, `babel-plugin-polyfill-corejs2` v0.4.6, `babel-plugin-polyfill-corejs3` v0.8.5, `babel-plugin-polyfill-es-shims` v0.10.0, `babel-plugin-polyfill-regenerator` v0.5.3.",
      "solution": "Upgrade package @babel/traverse to version 7.23.2,8.0.0-alpha.4 or above.",
      "fix_version": "7.23.2, 8.0.0-alpha.4"
    },
    {
      "cve_id": "CVE-2024-45590",
      "severity": "high",
      "score": 7.5,
      "description": "body-parser is Node.js body parsing middleware. body-parser <1.20.3 is vulnerable to denial of service when url encoding is enabled. A malicious actor using a specially crafted payload could flood the server with a large number of requests, resulting in denial of service. This issue is patched in 1.20.3.",
      "solution": "Upgrade package body-parser to version 1.20.3 or above.",
      "fix_version": "1.20.3"
    },
    {
      "cve_id": "CVE-2024-4068",
      "severity": "high",
      "score": 7.5,
      "description": "The NPM package `braces`, versions prior to 3.0.3, fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib/parse.js,` if a malicious user sends \"imbalanced braces\" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash.",
      "solution": "Upgrade package braces to version 3.0.3 or above.",
      "fix_version": "3.0.3"
    },
    {
      "cve_id": "CVE-2024-4068",
      "severity": "high",
      "score": 7.5,
      "description": "The NPM package `braces`, versions prior to 3.0.3, fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib/parse.js,` if a malicious user sends \"imbalanced braces\" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash.",
      "solution": "Upgrade package braces to version 3.0.3 or above.",
      "fix_version": "3.0.3"
    },
    {
      "cve_id": "CVE-2024-21538",
      "severity": "high",
      "score": 7.5,
      "description": "Versions of the package cross-spawn before 7.0.5 are vulnerable to Regular Expression Denial of Service (ReDoS) due to improper input sanitization. An attacker can increase the CPU usage and crash the program by crafting a very large and well crafted string.",
      "solution": "Upgrade package cross-spawn to version 6.0.6,7.0.5 or above.",
      "fix_version": "6.0.6, 7.0.5"
    },
    {
      "cve_id": "CVE-2024-21538",
      "severity": "high",
      "score": 7.5,
      "description": "Versions of the package cross-spawn before 7.0.5 are vulnerable to Regular Expression Denial of Service (ReDoS) due to improper input sanitization. An attacker can increase the CPU usage and crash the program by crafting a very large and well crafted string.",
      "solution": "Upgrade package cross-spawn to version 6.0.6,7.0.5 or above.",
      "fix_version": "6.0.6, 7.0.5"
    },
    {
      "cve_id": "CVE-2022-38900",
      "severity": "high",
      "score": 7.5,
      "description": "decode-uri-component 0.2.0 is vulnerable to Improper Input Validation resulting in DoS.",
      "solution": "Upgrade package decode-uri-component to version 0.2.1 or above.",
      "fix_version": "0.2.1"
    },
    {
      "cve_id": "CVE-2022-24999",
      "severity": "high",
      "score": 7.5,
      "description": "qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[__proto__]=b&a[__proto__]&a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has \"deps: qs@6.9.7\" in its release description, is not vulnerable).",
      "solution": "Upgrade package express to version 4.17.3 or above.",
      "fix_version": "4.17.3"
    },
    {
      "cve_id": "CVE-2024-29415",
      "severity": "high",
      "score": 8.1,
      "description": "The ip package through 2.0.1 for Node.js might allow SSRF because some IP addresses (such as 127.1, 01200034567, 012.1.2.3, 000:0:0000::01, and ::fFFf:127.0.0.1) are improperly categorized as globally routable via isPublic. NOTE: this issue exists because of an incomplete fix for CVE-2023-42282.",
      "solution": null,
      "fix_version": null
    },
    {
      "cve_id": "CVE-2022-46175",
      "severity": "high",
      "score": 8.8,
      "description": "JSON5 is an extension to the popular JSON file format that aims to be easier to write and maintain by hand (e.g. for config files). The `parse` method of the JSON5 library before and including versions 1.0.1 and 2.2.1 does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object. This vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations. This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution. `JSON5.parse` should restrict parsing of `__proto__` keys when parsing JSON strings to objects. As a point of reference, the `JSON.parse` method included in JavaScript ignores `__proto__` keys. Simply changing `JSON5.parse` to `JSON.parse` in the examples above mitigates this vulnerability. This vulnerability is patched in json5 versions 1.0.2, 2.2.2, and later.",
      "solution": "Upgrade package json5 to version 1.0.2,2.2.2 or above.",
      "fix_version": "1.0.2, 2.2.2"
    },
    {
      "cve_id": "CVE-2023-5363",
      "severity": "high",
      "score": 7.5,
      "description": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this because\nthe issue lies outside of the FIPS provider boundary.\n\nOpenSSL 3.1 and 3.0 are vulnerable to this issue.",
      "solution": "Upgrade package libcrypto3 to version 3.1.4-r0 or above.",
      "fix_version": "3.1.4-r0"
    },
    {
      "cve_id": "CVE-2024-4741",
      "severity": "high",
      "score": 7.5,
      "description": "Issue summary: Calling the OpenSSL API function SSL_free_buffers may cause\nmemory to be accessed that was previously freed in some situations\n\nImpact summary: A use after free can have a range of potential consequences such\nas the corruption of valid data, crashes or execution of arbitrary code.\nHowever, only applications that directly call the SSL_free_buffers function are\naffected by this issue. Applications that do not call this function are not\nvulnerable. Our investigations indicate that this function is rarely used by\napplications.\n\nThe SSL_free_buffers function is used to free the internal OpenSSL buffer used\nwhen processing an incoming record from the network. The call is only expected\nto succeed if the buffer is not currently in use. However, two scenarios have\nbeen identified where the buffer is freed even when still in use.\n\nThe first scenario occurs where a record header has been received from the\nnetwork and processed by OpenSSL, but the full record body has not yet arrived.\nIn this case calling SSL_free_buffers will succeed even though a record has only\nbeen partially processed and the buffer is still in use.\n\nThe second scenario occurs where a full record containing application data has\nbeen received and processed by OpenSSL but the application has only read part of\nthis data. Again a call to SSL_free_buffers will succeed even though the buffer\nis still in use.\n\nWhile these scenarios could occur accidentally during normal operation a\nmalicious attacker could attempt to engineer a stituation where this occurs.\nWe are not aware of this issue being actively exploited.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
      "solution": "Upgrade package libcrypto3 to version 3.1.6-r0 or above.",
      "fix_version": "3.1.6-r0"
    },
    {
      "cve_id": "CVE-2024-6119",
      "severity": "high",
      "score": 7.5,
      "description": "Issue summary: Applications performing certificate name checks (e.g., TLS\nclients checking server certificates) may attempt to read an invalid memory\naddress resulting in abnormal termination of the application process.\n\nImpact summary: Abnormal termination of an application can a cause a denial of\nservice.\n\nApplications performing certificate name checks (e.g., TLS clients checking\nserver certificates) may attempt to read an invalid memory address when\ncomparing the expected name with an `otherName` subject alternative name of an\nX.509 certificate. This may result in an exception that terminates the\napplication program.\n\nNote that basic certificate chain validation (signatures, dates, ...) is not\naffected, the denial of service can occur only when the application also\nspecifies an expected DNS name, Email address or IP address.\n\nTLS servers rarely solicit client certificates, and even when they do, they\ngenerally don't perform a name check against a reference identifier (expected\nidentity), but rather extract the presented identity after checking the\ncertificate chain.  So TLS servers are generally not affected and the severity\nof the issue is Moderate.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
      "solution": "Upgrade package libcrypto3 to version 3.1.7-r0 or above.",
      "fix_version": "3.1.7-r0"
    },
    {
      "cve_id": "CVE-2023-5363",
      "severity": "high",
      "score": 7.5,
      "description": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this because\nthe issue lies outside of the FIPS provider boundary.\n\nOpenSSL 3.1 and 3.0 are vulnerable to this issue.",
      "solution": "Upgrade package libssl3 to version 3.1.4-r0 or above.",
      "fix_version": "3.1.4-r0"
    },
    {
      "cve_id": "CVE-2024-4741",
      "severity": "high",
      "score": 7.5,
      "description": "Issue summary: Calling the OpenSSL API function SSL_free_buffers may cause\nmemory to be accessed that was previously freed in some situations\n\nImpact summary: A use after free can have a range of potential consequences such\nas the corruption of valid data, crashes or execution of arbitrary code.\nHowever, only applications that directly call the SSL_free_buffers function are\naffected by this issue. Applications that do not call this function are not\nvulnerable. Our investigations indicate that this function is rarely used by\napplications.\n\nThe SSL_free_buffers function is used to free the internal OpenSSL buffer used\nwhen processing an incoming record from the network. The call is only expected\nto succeed if the buffer is not currently in use. However, two scenarios have\nbeen identified where the buffer is freed even when still in use.\n\nThe first scenario occurs where a record header has been received from the\nnetwork and processed by OpenSSL, but the full record body has not yet arrived.\nIn this case calling SSL_free_buffers will succeed even though a record has only\nbeen partially processed and the buffer is still in use.\n\nThe second scenario occurs where a full record containing application data has\nbeen received and processed by OpenSSL but the application has only read part of\nthis data. Again a call to SSL_free_buffers will succeed even though the buffer\nis still in use.\n\nWhile these scenarios could occur accidentally during normal operation a\nmalicious attacker could attempt to engineer a stituation where this occurs.\nWe are not aware of this issue being actively exploited.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
      "solution": "Upgrade package libssl3 to version 3.1.6-r0 or above.",
      "fix_version": "3.1.6-r0"
    },
    {
      "cve_id": "CVE-2024-6119",
      "severity": "high",
      "score": 7.5,
      "description": "Issue summary: Applications performing certificate name checks (e.g., TLS\nclients checking server certificates) may attempt to read an invalid memory\naddress resulting in abnormal termination of the application process.\n\nImpact summary: Abnormal termination of an application can a cause a denial of\nservice.\n\nApplications performing certificate name checks (e.g., TLS clients checking\nserver certificates) may attempt to read an invalid memory address when\ncomparing the expected name with an `otherName` subject alternative name of an\nX.509 certificate. This may result in an exception that terminates the\napplication program.\n\nNote that basic certificate chain validation (signatures, dates, ...) is not\naffected, the denial of service can occur only when the application also\nspecifies an expected DNS name, Email address or IP address.\n\nTLS servers rarely solicit client certificates, and even when they do, they\ngenerally don't perform a name check against a reference identifier (expected\nidentity), but rather extract the presented identity after checking the\ncertificate chain.  So TLS servers are generally not affected and the severity\nof the issue is Moderate.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
      "solution": "Upgrade package libssl3 to version 3.1.7-r0 or above.",
      "fix_version": "3.1.7-r0"
    },
    {
      "cve_id": "CVE-2022-3517",
      "severity": "high",
      "score": 7.5,
      "description": "A vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service.",
      "solution": "Upgrade package minimatch to version 3.0.5 or above.",
      "fix_version": "3.0.5"
    },
    {
      "cve_id": "CVE-2025-26519",
      "severity": "high",
      "score": 8.1,
      "description": "musl libc 0.9.13 through 1.2.5 before 1.2.6 has an out-of-bounds write vulnerability when an attacker can trigger iconv conversion of untrusted EUC-KR text to UTF-8.",
      "solution": "Upgrade package musl to version 1.2.4-r3 or above.",
      "fix_version": "1.2.4-r3"
    },
    {
      "cve_id": "CVE-2025-26519",
      "severity": "high",
      "score": 8.1,
      "description": "musl libc 0.9.13 through 1.2.5 before 1.2.6 has an out-of-bounds write vulnerability when an attacker can trigger iconv conversion of untrusted EUC-KR text to UTF-8.",
      "solution": "Upgrade package musl-utils to version 1.2.4-r3 or above.",
      "fix_version": "1.2.4-r3"
    },
    {
      "cve_id": "CVE-2021-23343",
      "severity": "high",
      "score": 7.5,
      "description": "All versions of package path-parse are vulnerable to Regular Expression Denial of Service (ReDoS) via splitDeviceRe, splitTailRe, and splitPathRe regular expressions. ReDoS exhibits polynomial worst-case time complexity.",
      "solution": "Upgrade package path-parse to version 1.0.7 or above.",
      "fix_version": "1.0.7"
    },
    {
      "cve_id": "CVE-2022-24999",
      "severity": "high",
      "score": 7.5,
      "description": "qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[__proto__]=b&a[__proto__]&a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has \"deps: qs@6.9.7\" in its release description, is not vulnerable).",
      "solution": "Upgrade package qs to version 6.10.3,6.2.4,6.3.3,6.4.1,6.5.3,6.6.1,6.7.3,6.8.3,6.9.7 or above.",
      "fix_version": "6.10.3, 6.2.4, 6.3.3, 6.4.1, 6.5.3, 6.6.1, 6.7.3, 6.8.3, 6.9.7"
    },
    {
      "cve_id": "CVE-2022-25883",
      "severity": "high",
      "score": 7.5,
      "description": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r",
      "solution": "Upgrade package semver to version 5.7.2,6.3.1,7.5.2 or above.",
      "fix_version": "5.7.2, 6.3.1, 7.5.2"
    },
    {
      "cve_id": "CVE-2022-25883",
      "severity": "high",
      "score": 7.5,
      "description": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r",
      "solution": "Upgrade package semver to version 5.7.2,6.3.1,7.5.2 or above.",
      "fix_version": "5.7.2, 6.3.1, 7.5.2"
    },
    {
      "cve_id": "CVE-2022-25883",
      "severity": "high",
      "score": 7.5,
      "description": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r",
      "solution": "Upgrade package semver to version 5.7.2,6.3.1,7.5.2 or above.",
      "fix_version": "5.7.2, 6.3.1, 7.5.2"
    },
    {
      "cve_id": "CVE-2022-25883",
      "severity": "high",
      "score": 7.5,
      "description": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r",
      "solution": "Upgrade package semver to version 5.7.2,6.3.1,7.5.2 or above.",
      "fix_version": "5.7.2, 6.3.1, 7.5.2"
    },
    {
      "cve_id": "CVE-2022-25883",
      "severity": "high",
      "score": 7.5,
      "description": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r",
      "solution": "Upgrade package semver to version 5.7.2,6.3.1,7.5.2 or above.",
      "fix_version": "5.7.2, 6.3.1, 7.5.2"
    },
    {
      "cve_id": "CVE-2022-25883",
      "severity": "high",
      "score": 7.5,
      "description": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r",
      "solution": "Upgrade package semver to version 5.7.2,6.3.1,7.5.2 or above.",
      "fix_version": "5.7.2, 6.3.1, 7.5.2"
    },
    {
      "cve_id": "CVE-2022-25883",
      "severity": "high",
      "score": 7.5,
      "description": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r",
      "solution": "Upgrade package semver to version 5.7.2,6.3.1,7.5.2 or above.",
      "fix_version": "5.7.2, 6.3.1, 7.5.2"
    },
    {
      "cve_id": "CVE-2022-25883",
      "severity": "high",
      "score": 7.5,
      "description": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r",
      "solution": "Upgrade package semver to version 5.7.2,6.3.1,7.5.2 or above.",
      "fix_version": "5.7.2, 6.3.1, 7.5.2"
    },
    {
      "cve_id": "CVE-2021-3777",
      "severity": "high",
      "score": 7.5,
      "description": "nodejs-tmpl is vulnerable to Inefficient Regular Expression Complexity",
      "solution": "Upgrade package tmpl to version 1.0.5 or above.",
      "fix_version": "1.0.5"
    },
    {
      "cve_id": "CVE-2023-26115",
      "severity": "high",
      "score": 7.5,
      "description": "All versions of the package word-wrap are vulnerable to Regular Expression Denial of Service (ReDoS) due to the usage of an insecure regular expression within the result variable.",
      "solution": "Upgrade package word-wrap to version 1.2.4 or above.",
      "fix_version": "1.2.4"
    },
    {
      "cve_id": "CVE-2024-37890",
      "severity": "high",
      "score": 7.5,
      "description": "ws is an open source WebSocket client and server for Node.js. A request with a number of headers exceeding theserver.maxHeadersCount threshold could be used to crash a ws server. The vulnerability was fixed in ws@8.17.1 (e55e510) and backported to ws@7.5.10 (22c2876), ws@6.2.3 (eeb76d3), and ws@5.2.4 (4abd8f6). In vulnerable versions of ws, the issue can be mitigated in the following ways: 1. Reduce the maximum allowed length of the request headers using the --max-http-header-size=size and/or the maxHeaderSize options so that no more headers than the server.maxHeadersCount limit can be sent. 2. Set server.maxHeadersCount to 0 so that no limit is applied.",
      "solution": "Upgrade package ws to version 5.2.4,6.2.3,7.5.10,8.17.1 or above.",
      "fix_version": "5.2.4, 6.2.3, 7.5.10, 8.17.1"
    }
  ]
}
