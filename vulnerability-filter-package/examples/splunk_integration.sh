#!/bin/bash
# Example script showing how to filter Aqua scan results for Splunk integration

# Set variables
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
INPUT_DIR="$SCRIPT_DIR/input"
OUTPUT_DIR="$SCRIPT_DIR/output"
PREVIOUS_SCAN_DIR="$SCRIPT_DIR/previous"

# Create the output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

# Define paths
SCAN_JSON="$INPUT_DIR/aqua-scan.json"
PREVIOUS_SCAN_JSON="$PREVIOUS_SCAN_DIR/aqua-scan.json"
FILTERED_OUTPUT="$OUTPUT_DIR/filtered-for-splunk.json"
SPLUNK_EVENTS="$OUTPUT_DIR/filtered-for-splunk_splunk.json"

echo "=== Aqua Security Scan Filter for Splunk Integration ==="

# Step 1: Filter vulnerabilities for Splunk ingestion
if [ -f "$SCAN_JSON" ]; then
    echo "Filtering scan data for Splunk integration..."
    
    # TEMPORARILY DISABLED DELTA REPORTING FOR TESTING
    echo "  - Using basic filtering (delta reporting disabled for testing)"
    python3 "$SCRIPT_DIR/../scripts/filter_for_splunk.py" \
        "$SCAN_JSON" \
        "$FILTERED_OUTPUT" \
        --min-severity 7.0
    
    # Check if filtering succeeded
    if [ $? -eq 0 ] && [ -f "$FILTERED_OUTPUT" ]; then
        echo "✅ Successfully filtered scan data"
        echo "  - Filtered report: $FILTERED_OUTPUT"
        echo "  - Splunk events: $SPLUNK_EVENTS"
        echo "  - Summary: ${FILTERED_OUTPUT%.*}_summary.json"
    else
        echo "❌ Error filtering scan data"
        exit 1
    fi
else
    echo "❌ Input file not found: $SCAN_JSON"
    exit 1
fi

# Step 2: Send to Splunk (commented out - replace with your Splunk HEC details)
echo ""
echo "To send data to Splunk, uncomment and update the following command:"
echo ""
echo "#python3 \"$SCRIPT_DIR/../scripts/send_to_splunk.py\" \\"
echo "#    \"$SPLUNK_EVENTS\" \\"
echo "#    --hec-url \"https://splunk.example.com:8088/services/collector\" \\"
echo "#    --token \"YOUR-SPLUNK-HEC-TOKEN\""
echo ""

# Step 3: Show size reduction
if [ -f "${FILTERED_OUTPUT%.*}_summary.json" ]; then
    ORIGINAL_SIZE=$(jq -r '.filtering_summary.size_reduction.original_bytes' "${FILTERED_OUTPUT%.*}_summary.json")
    FILTERED_SIZE=$(jq -r '.filtering_summary.size_reduction.filtered_bytes' "${FILTERED_OUTPUT%.*}_summary.json")
    REDUCTION_PCT=$(jq -r '.filtering_summary.size_reduction.reduction_percentage' "${FILTERED_OUTPUT%.*}_summary.json")
    
    echo "Size Reduction:"
    echo "  - Original: $(numfmt --to=iec-i --suffix=B $ORIGINAL_SIZE)"
    echo "  - Filtered: $(numfmt --to=iec-i --suffix=B $FILTERED_SIZE)"
    echo "  - Reduction: $REDUCTION_PCT%"
    
    # Show vulnerability counts
    TOTAL=$(jq -r '.filtering_summary.total_vulnerabilities' "${FILTERED_OUTPUT%.*}_summary.json")
    INCLUDED=$(jq -r '.filtering_summary.vulnerabilities_included' "${FILTERED_OUTPUT%.*}_summary.json")
    
    echo ""
    echo "Vulnerability Counts:"
    echo "  - Original: $TOTAL vulnerabilities"
    echo "  - After filtering: $INCLUDED vulnerabilities"
fi

echo ""
echo "✅ Done" 