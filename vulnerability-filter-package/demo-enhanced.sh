#!/bin/bash

# Enhanced Vulnerability Filter Demo - Comprehensive Security Analysis
# This demo showcases advanced filtering capabilities for security teams

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Demo configuration
DEMO_DIR="demo-data"
REPORTS_DIR="${DEMO_DIR}/reports"
ORIGINAL_DIR="${REPORTS_DIR}/original"
FILTERED_DIR="${REPORTS_DIR}/filtered"
ANALYTICS_DIR="${REPORTS_DIR}/analytics"
COMPLIANCE_DIR="${REPORTS_DIR}/compliance"
TRIAGE_DIR="${REPORTS_DIR}/triage"

# Clear screen and show banner
clear
echo -e "${BOLD}${CYAN}"
echo "╔════════════════════════════════════════════════════════════════════╗"
echo "║          ENHANCED VULNERABILITY FILTER DEMO v2.0                   ║"
echo "║     Advanced Security Analysis for Enterprise DevSecOps            ║"
echo "╚════════════════════════════════════════════════════════════════════╝"
echo -e "${NC}"

# Function to display section headers
section_header() {
    echo -e "\n${BOLD}${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${BOLD}${PURPLE}  $1${NC}"
    echo -e "${BOLD}${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
}

# Function to show progress
show_progress() {
    echo -ne "${CYAN}[${NC}"
    for i in {1..20}; do
        echo -ne "${GREEN}█${NC}"
        sleep 0.05
    done
    echo -e "${CYAN}] Complete!${NC}"
}

# Function to display vulnerability statistics
show_stats() {
    local file=$1
    local label=$2
    
    if [ -f "$file" ]; then
        # Check if this is a filtered report (with .vulnerabilities) or original Aqua scan (with .resources)
        if jq -e '.vulnerabilities' "$file" >/dev/null 2>&1; then
            # Filtered format
            local total=$(jq '.vulnerabilities | length' "$file" 2>/dev/null || echo "0")
            local critical=$(jq '[.vulnerabilities[] | select(.severity == "critical" or .severity == "CRITICAL")] | length' "$file" 2>/dev/null || echo "0")
            local high=$(jq '[.vulnerabilities[] | select(.severity == "high" or .severity == "HIGH")] | length' "$file" 2>/dev/null || echo "0")
            local medium=$(jq '[.vulnerabilities[] | select(.severity == "medium" or .severity == "MEDIUM")] | length' "$file" 2>/dev/null || echo "0")
            local low=$(jq '[.vulnerabilities[] | select(.severity == "low" or .severity == "LOW")] | length' "$file" 2>/dev/null || echo "0")
        else
            # Original Aqua format - count vulnerabilities in resources
            local total=$(jq '[.resources[].vulnerabilities[]?] | length' "$file" 2>/dev/null || echo "0")
            local critical=$(jq '[.resources[].vulnerabilities[]? | select(.aqua_severity == "critical" or .nvd_severity_v3 == "critical")] | length' "$file" 2>/dev/null || echo "0")
            local high=$(jq '[.resources[].vulnerabilities[]? | select(.aqua_severity == "high" or .nvd_severity_v3 == "high")] | length' "$file" 2>/dev/null || echo "0")
            local medium=$(jq '[.resources[].vulnerabilities[]? | select(.aqua_severity == "medium" or .nvd_severity_v3 == "medium")] | length' "$file" 2>/dev/null || echo "0")
            local low=$(jq '[.resources[].vulnerabilities[]? | select(.aqua_severity == "low" or .nvd_severity_v3 == "low")] | length' "$file" 2>/dev/null || echo "0")
        fi
        
        echo -e "${BOLD}${label}:${NC}"
        echo -e "  ${RED}● Critical: ${critical}${NC}"
        echo -e "  ${YELLOW}● High: ${high}${NC}"
        echo -e "  ${BLUE}● Medium: ${medium}${NC}"
        echo -e "  ${GREEN}● Low: ${low}${NC}"
        echo -e "  ${BOLD}Total: ${total}${NC}"
        
        # Visual bar chart
        echo -ne "  ["
        [ $critical -gt 0 ] && printf "${RED}%0.s█${NC}" $(seq 1 $((critical/2)))
        [ $high -gt 0 ] && printf "${YELLOW}%0.s█${NC}" $(seq 1 $((high/2)))
        [ $medium -gt 0 ] && printf "${BLUE}%0.s█${NC}" $(seq 1 $((medium/2)))
        [ $low -gt 0 ] && printf "${GREEN}%0.s█${NC}" $(seq 1 $((low/2)))
        echo "]"
    else
        echo -e "${RED}File not found: $file${NC}"
    fi
}

# Function to create visual comparison
compare_reports() {
    local original=$1
    local filtered=$2
    local label=$3
    
    echo -e "\n${BOLD}${CYAN}$label${NC}"
    echo -e "${BOLD}Before Filtering:${NC}"
    show_stats "$original" "Original Report"
    echo ""
    echo -e "${BOLD}After Filtering:${NC}"
    show_stats "$filtered" "Filtered Report"
    
    # Calculate reduction percentage
    if [ -f "$original" ] && [ -f "$filtered" ]; then
        # Get total count based on format
        if jq -e '.vulnerabilities' "$original" >/dev/null 2>&1; then
            local orig_total=$(jq '.vulnerabilities | length' "$original" 2>/dev/null || echo "0")
        else
            local orig_total=$(jq '[.resources[].vulnerabilities[]?] | length' "$original" 2>/dev/null || echo "0")
        fi
        
        if jq -e '.vulnerabilities' "$filtered" >/dev/null 2>&1; then
            local filt_total=$(jq '.vulnerabilities | length' "$filtered" 2>/dev/null || echo "0")
        else
            local filt_total=$(jq '[.resources[].vulnerabilities[]?] | length' "$filtered" 2>/dev/null || echo "0")
        fi
        
        if [ $orig_total -gt 0 ]; then
            local reduction=$(( (orig_total - filt_total) * 100 / orig_total ))
            echo -e "\n${BOLD}${GREEN}✓ Vulnerability Reduction: ${reduction}%${NC}"
        fi
    fi
}

# Create sample scan data for demo purposes
create_sample_scan_data() {
    cat > "$ORIGINAL_DIR/aqua-scan.json" << 'EOF'
{
  "image": "demo-app:latest",
  "registry": "docker.io",
  "scan_started": {
    "seconds": 1700000000
  },
  "resources": [
    {
      "resource": {
        "name": "express",
        "version": "4.17.1",
        "type": "package",
        "path": "/app/node_modules/express"
      },
      "vulnerabilities": [
        {
          "name": "CVE-2025-CRITICAL-001",
          "description": "Critical vulnerability in express framework allowing remote code execution",
          "nvd_score_v3": 9.8,
          "nvd_severity_v3": "critical",
          "aqua_score": 9.8,
          "aqua_severity": "critical",
          "fix_version": "4.18.0",
          "solution": "Upgrade express to version 4.18.0 or later"
        },
        {
          "name": "CVE-2025-HIGH-001",
          "description": "High severity authentication bypass vulnerability",
          "nvd_score_v3": 8.5,
          "nvd_severity_v3": "high",
          "aqua_score": 8.5,
          "aqua_severity": "high",
          "fix_version": "4.17.2",
          "solution": "Upgrade express to version 4.17.2 or later"
        },
        {
          "name": "CVE-2025-MEDIUM-001",
          "description": "Medium severity information disclosure vulnerability",
          "nvd_score_v3": 5.3,
          "nvd_severity_v3": "medium",
          "aqua_score": 5.3,
          "aqua_severity": "medium",
          "fix_version": "4.17.2",
          "solution": "Upgrade express to version 4.17.2 or later"
        },
        {
          "name": "CVE-2025-LOW-001",
          "description": "Low severity denial of service vulnerability",
          "nvd_score_v3": 3.1,
          "nvd_severity_v3": "low",
          "aqua_score": 3.1,
          "aqua_severity": "low",
          "fix_version": "4.17.2",
          "solution": "Upgrade express to version 4.17.2 or later"
        }
      ]
    },
    {
      "resource": {
        "name": "lodash",
        "version": "4.17.19",
        "type": "package",
        "path": "/app/node_modules/lodash"
      },
      "vulnerabilities": [
        {
          "name": "CVE-2025-CRITICAL-002",
          "description": "Critical prototype pollution vulnerability",
          "nvd_score_v3": 9.1,
          "nvd_severity_v3": "critical",
          "aqua_score": 9.1,
          "aqua_severity": "critical",
          "fix_version": "4.17.21",
          "solution": "Upgrade lodash to version 4.17.21"
        },
        {
          "name": "CVE-2025-HIGH-002",
          "description": "High severity command injection vulnerability",
          "nvd_score_v3": 7.2,
          "nvd_severity_v3": "high",
          "aqua_score": 7.2,
          "aqua_severity": "high",
          "fix_version": "4.17.21",
          "solution": "Upgrade lodash to version 4.17.21"
        }
      ]
    }
  ]
}
EOF
    echo -e "${GREEN}Created sample scan data for demo${NC}"
}

# Setup demo directories
setup_demo() {
    echo -e "${CYAN}Setting up demo environment...${NC}"
    mkdir -p "$ORIGINAL_DIR" "$FILTERED_DIR" "$ANALYTICS_DIR" "$COMPLIANCE_DIR" "$TRIAGE_DIR"
    
    # Check if we have a sample scan report
    if [ ! -f "$ORIGINAL_DIR/aqua-scan.json" ]; then
        # Try to copy from various possible locations
        if [ -f "aqua-scan/aqua-scan.json" ]; then
            cp "aqua-scan/aqua-scan.json" "$ORIGINAL_DIR/"
            echo -e "${GREEN}Using real Aqua scan report from aqua-scan directory${NC}"
        elif [ -f "../Aqua-Reports/aqua-scan.json" ]; then
            cp "../Aqua-Reports/aqua-scan.json" "$ORIGINAL_DIR/"
        elif [ -f "examples/input/aqua-scan.json" ]; then
            cp "examples/input/aqua-scan.json" "$ORIGINAL_DIR/"
        elif [ -f "../ci_scripts/ignored_cves_config.json" ]; then
            # Create a minimal sample if no scan exists
            create_sample_scan_data
        else
            echo -e "${RED}Error: No sample scan data found. Please run an Aqua scan first.${NC}"
            echo -e "${YELLOW}Try running: ./demo.sh first to generate sample data${NC}"
            exit 1
        fi
    fi
    
    show_progress
}

# Scenario 1: High/Critical Filtering for Production Deployment
scenario_production() {
    section_header "SCENARIO 1: Production Deployment Gate"
    
    echo -e "${YELLOW}Use Case:${NC} Only critical and high severity vulnerabilities block production deployments"
    echo -e "${YELLOW}Goal:${NC} Filter report to show only high/critical issues for go/no-go decision\n"
    
    echo -e "${CYAN}Filtering for high and critical vulnerabilities only...${NC}"
    
    # Create high/critical filter using the dedicated script
    python3 scripts/filter_high_critical.py \
        "$ORIGINAL_DIR/aqua-scan.json" \
        "$FILTERED_DIR/production-filtered.json" 2>/dev/null
    
    show_progress
    
    compare_reports \
        "$ORIGINAL_DIR/aqua-scan.json" \
        "$FILTERED_DIR/production-filtered.json" \
        "Production Gate Analysis"
    
    echo -e "\n${GREEN}✓ Production Decision:${NC} Review only ${BOLD}high/critical${NC} issues for deployment approval"
}

# Scenario 2: Compliance Reporting by Severity
scenario_compliance() {
    section_header "SCENARIO 2: Compliance Reporting Dashboard"
    
    echo -e "${YELLOW}Use Case:${NC} Generate separate reports for each severity level for compliance audits"
    echo -e "${YELLOW}Goal:${NC} Create severity-specific JSON files for different stakeholders\n"
    
    # Filter by each severity level
    for severity in critical high medium low; do
        echo -e "${CYAN}Creating ${severity} severity report...${NC}"
        
        # Create a filtered JSON with only vulnerabilities of this severity
        # This creates a simplified format for compliance reporting
        jq --arg sev "$severity" '{
            scan_info: {
                image: .image,
                registry: .registry,
                scan_date: .scan_started
            },
            vulnerabilities: [.resources[].vulnerabilities[]? | 
                select(.aqua_severity == $sev or .nvd_severity_v3 == $sev) |
                {
                    cve_id: .name,
                    severity: (.aqua_severity // .nvd_severity_v3),
                    score: (.aqua_score // .nvd_score_v3),
                    description: .description,
                    solution: .solution,
                    fix_version: .fix_version
                }
            ]
        }' "$ORIGINAL_DIR/aqua-scan.json" > "$COMPLIANCE_DIR/${severity}-only.json" 2>/dev/null
        
        # Show mini stats
        count=$(jq '.vulnerabilities | length' "$COMPLIANCE_DIR/${severity}-only.json" 2>/dev/null || echo "0")
        case $severity in
            critical) color=$RED ;;
            high) color=$YELLOW ;;
            medium) color=$BLUE ;;
            low) color=$GREEN ;;
        esac
        echo -e "  ${color}● ${severity^^}: ${count} vulnerabilities${NC}"
    done
    
    show_progress
    
    echo -e "\n${GREEN}✓ Compliance Reports Generated:${NC}"
    echo -e "  • Critical issues → Security Team"
    echo -e "  • High issues → Development Team"
    echo -e "  • Medium issues → Sprint Planning"
    echo -e "  • Low issues → Technical Debt Backlog"
}

# Scenario 3: Smart Triage with CVSS Ranges
scenario_triage() {
    section_header "SCENARIO 3: Intelligent Vulnerability Triage"
    
    echo -e "${YELLOW}Use Case:${NC} Create triage buckets based on CVSS score ranges and exploitability"
    echo -e "${YELLOW}Goal:${NC} Prioritize remediation efforts based on risk scoring\n"
    
    # Create triage buckets
    echo -e "${CYAN}Creating triage buckets...${NC}"
    
    # Critical: CVSS 9.0-10.0
    jq '.vulnerabilities = [.vulnerabilities[] | select(.nvd_score >= 9.0)]' \
        "$ORIGINAL_DIR/aqua-scan.json" > "$TRIAGE_DIR/immediate-action.json" 2>/dev/null
    
    # High: CVSS 7.0-8.9
    jq '.vulnerabilities = [.vulnerabilities[] | select(.nvd_score >= 7.0 and .nvd_score < 9.0)]' \
        "$ORIGINAL_DIR/aqua-scan.json" > "$TRIAGE_DIR/high-priority.json" 2>/dev/null
    
    # Medium: CVSS 4.0-6.9
    jq '.vulnerabilities = [.vulnerabilities[] | select(.nvd_score >= 4.0 and .nvd_score < 7.0)]' \
        "$ORIGINAL_DIR/aqua-scan.json" > "$TRIAGE_DIR/scheduled-fix.json" 2>/dev/null
    
    # Low: CVSS 0.0-3.9
    jq '.vulnerabilities = [.vulnerabilities[] | select(.nvd_score < 4.0)]' \
        "$ORIGINAL_DIR/aqua-scan.json" > "$TRIAGE_DIR/backlog.json" 2>/dev/null
    
    show_progress
    
    echo -e "\n${BOLD}Triage Summary:${NC}"
    echo -e "${RED}● Immediate Action (CVSS 9.0+):${NC} $(jq '.vulnerabilities | length' "$TRIAGE_DIR/immediate-action.json" 2>/dev/null || echo "0") issues"
    echo -e "${YELLOW}● High Priority (CVSS 7.0-8.9):${NC} $(jq '.vulnerabilities | length' "$TRIAGE_DIR/high-priority.json" 2>/dev/null || echo "0") issues"
    echo -e "${BLUE}● Scheduled Fix (CVSS 4.0-6.9):${NC} $(jq '.vulnerabilities | length' "$TRIAGE_DIR/scheduled-fix.json" 2>/dev/null || echo "0") issues"
    echo -e "${GREEN}● Backlog (CVSS < 4.0):${NC} $(jq '.vulnerabilities | length' "$TRIAGE_DIR/backlog.json" 2>/dev/null || echo "0") issues"
}

# Scenario 4: Exploitability Analysis
scenario_exploitability() {
    section_header "SCENARIO 4: Exploitability-Based Filtering"
    
    echo -e "${YELLOW}Use Case:${NC} Focus on vulnerabilities with known exploits or high exploit probability"
    echo -e "${YELLOW}Goal:${NC} Prioritize patching based on real-world threat data\n"
    
    echo -e "${CYAN}Analyzing exploitability metrics...${NC}"
    
    # Filter for exploitable vulnerabilities
    jq '.vulnerabilities = [.vulnerabilities[] | select(
        .exploit_available == true or 
        .exploit_type != null or 
        (.nvd_score >= 7.0 and .vector_string != null and (.vector_string | contains("NETWORK")))
    )]' "$ORIGINAL_DIR/aqua-scan.json" > "$ANALYTICS_DIR/exploitable.json" 2>/dev/null
    
    # Filter for network-accessible high severity
    jq '.vulnerabilities = [.vulnerabilities[] | select(
        .nvd_score >= 7.0 and 
        .vector_string != null and 
        (.vector_string | contains("NETWORK"))
    )]' "$ORIGINAL_DIR/aqua-scan.json" > "$ANALYTICS_DIR/network-exposed.json" 2>/dev/null
    
    show_progress
    
    echo -e "\n${BOLD}Exploitability Analysis:${NC}"
    local exploitable=$(jq '.vulnerabilities | length' "$ANALYTICS_DIR/exploitable.json" 2>/dev/null || echo "0")
    local network=$(jq '.vulnerabilities | length' "$ANALYTICS_DIR/network-exposed.json" 2>/dev/null || echo "0")
    
    echo -e "${RED}● Exploitable Vulnerabilities:${NC} $exploitable"
    echo -e "${YELLOW}● Network-Accessible High Severity:${NC} $network"
    
    # Show top exploitable CVEs
    echo -e "\n${BOLD}Top Exploitable CVEs:${NC}"
    jq -r '.vulnerabilities[:5] | .[] | "  • \(.name) (CVSS: \(.nvd_score)) - \(.description[:60])..."' \
        "$ANALYTICS_DIR/exploitable.json" 2>/dev/null || echo "  No exploitable vulnerabilities found"
}

# Scenario 5: CI/CD Pipeline Integration
scenario_cicd() {
    section_header "SCENARIO 5: CI/CD Pipeline Integration"
    
    echo -e "${YELLOW}Use Case:${NC} Automated vulnerability gating in CI/CD pipeline"
    echo -e "${YELLOW}Goal:${NC} Demonstrate pipeline-friendly filtering with exit codes\n"
    
    echo -e "${CYAN}Simulating CI/CD pipeline checks...${NC}"
    
    # Check for critical vulnerabilities
    critical_count=$(jq '[.vulnerabilities[] | select(.severity == "critical")] | length' \
        "$ORIGINAL_DIR/aqua-scan.json" 2>/dev/null || echo "0")
    
    high_count=$(jq '[.vulnerabilities[] | select(.severity == "high")] | length' \
        "$ORIGINAL_DIR/aqua-scan.json" 2>/dev/null || echo "0")
    
    echo -e "\n${BOLD}Pipeline Gates:${NC}"
    
    # Production gate
    if [ "$critical_count" -gt 0 ]; then
        echo -e "${RED}✗ PRODUCTION GATE: FAILED${NC} - $critical_count critical vulnerabilities found"
        echo -e "  Exit code: 1"
    else
        echo -e "${GREEN}✓ PRODUCTION GATE: PASSED${NC} - No critical vulnerabilities"
        echo -e "  Exit code: 0"
    fi
    
    # Staging gate
    if [ "$high_count" -gt 5 ]; then
        echo -e "${YELLOW}⚠ STAGING GATE: WARNING${NC} - $high_count high vulnerabilities exceed threshold (5)"
        echo -e "  Exit code: 0 (warning only)"
    else
        echo -e "${GREEN}✓ STAGING GATE: PASSED${NC} - High vulnerabilities within threshold"
        echo -e "  Exit code: 0"
    fi
    
    # Generate pipeline-friendly output
    cat > "$ANALYTICS_DIR/pipeline-summary.json" <<EOF
{
  "scan_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "gates": {
    "production": {
      "status": $([ "$critical_count" -gt 0 ] && echo '"failed"' || echo '"passed"'),
      "critical_vulnerabilities": $critical_count,
      "threshold": 0
    },
    "staging": {
      "status": $([ "$high_count" -gt 5 ] && echo '"warning"' || echo '"passed"'),
      "high_vulnerabilities": $high_count,
      "threshold": 5
    }
  },
  "exit_code": $([ "$critical_count" -gt 0 ] && echo '1' || echo '0')
}
EOF
    
    echo -e "\n${GREEN}✓ Pipeline summary written to:${NC} $ANALYTICS_DIR/pipeline-summary.json"
}

# Scenario 6: Delta Analysis
scenario_delta() {
    section_header "SCENARIO 6: Delta Analysis - What's New?"
    
    echo -e "${YELLOW}Use Case:${NC} Compare current scan with previous to identify new vulnerabilities"
    echo -e "${YELLOW}Goal:${NC} Focus remediation on newly introduced security issues\n"
    
    if [ -f "$DEMO_DIR/reports/previous/aqua-scan.json" ]; then
        echo -e "${CYAN}Performing delta analysis...${NC}"
        
        python scripts/filter_aqua_reports.py \
            --input-dir "$ORIGINAL_DIR" \
            --output-dir "$FILTERED_DIR" \
            --previous-scan "$DEMO_DIR/reports/previous/aqua-scan.json" \
            --output-prefix "delta" 2>/dev/null
        
        show_progress
        
        if [ -f "$FILTERED_DIR/delta-filtered.json" ]; then
            new_vulns=$(jq '.vulnerabilities | length' "$FILTERED_DIR/delta-filtered.json" 2>/dev/null || echo "0")
            echo -e "\n${BOLD}Delta Analysis Results:${NC}"
            echo -e "${YELLOW}● New Vulnerabilities:${NC} $new_vulns"
            
            # Show new critical/high issues
            new_critical=$(jq '[.vulnerabilities[] | select(.severity == "critical")] | length' \
                "$FILTERED_DIR/delta-filtered.json" 2>/dev/null || echo "0")
            new_high=$(jq '[.vulnerabilities[] | select(.severity == "high")] | length' \
                "$FILTERED_DIR/delta-filtered.json" 2>/dev/null || echo "0")
            
            echo -e "${RED}● New Critical:${NC} $new_critical"
            echo -e "${YELLOW}● New High:${NC} $new_high"
            
            if [ "$new_critical" -gt 0 ] || [ "$new_high" -gt 0 ]; then
                echo -e "\n${RED}⚠ ACTION REQUIRED:${NC} New high-severity vulnerabilities introduced!"
            else
                echo -e "\n${GREEN}✓ No new high-severity vulnerabilities introduced${NC}"
            fi
        fi
    else
        echo -e "${YELLOW}Note: Previous scan not available for delta analysis${NC}"
    fi
}

# Interactive menu
show_menu() {
    echo -e "\n${BOLD}${CYAN}Select a demo scenario:${NC}"
    echo -e "${BOLD}1)${NC} Production Deployment Gate"
    echo -e "${BOLD}2)${NC} Compliance Reporting Dashboard"
    echo -e "${BOLD}3)${NC} Intelligent Vulnerability Triage"
    echo -e "${BOLD}4)${NC} Exploitability-Based Filtering"
    echo -e "${BOLD}5)${NC} CI/CD Pipeline Integration"
    echo -e "${BOLD}6)${NC} Delta Analysis - What's New?"
    echo -e "${BOLD}7)${NC} Run All Scenarios"
    echo -e "${BOLD}8)${NC} Generate Executive Summary"
    echo -e "${BOLD}0)${NC} Exit"
    echo -ne "\n${BOLD}Enter your choice [0-8]: ${NC}"
}

# Generate executive summary
generate_summary() {
    section_header "EXECUTIVE SUMMARY"
    
    echo -e "${BOLD}${CYAN}Vulnerability Management Dashboard${NC}"
    echo -e "${BOLD}Generated:${NC} $(date)"
    echo ""
    
    # Overall statistics
    if [ -f "$ORIGINAL_DIR/aqua-scan.json" ]; then
        total=$(jq '.vulnerabilities | length' "$ORIGINAL_DIR/aqua-scan.json" 2>/dev/null || echo "0")
        critical=$(jq '[.vulnerabilities[] | select(.severity == "critical")] | length' "$ORIGINAL_DIR/aqua-scan.json" 2>/dev/null || echo "0")
        high=$(jq '[.vulnerabilities[] | select(.severity == "high")] | length' "$ORIGINAL_DIR/aqua-scan.json" 2>/dev/null || echo "0")
        
        echo -e "${BOLD}Total Vulnerabilities:${NC} $total"
        echo -e "${RED}Critical:${NC} $critical | ${YELLOW}High:${NC} $high"
        echo ""
        
        # Risk assessment
        echo -e "${BOLD}Risk Assessment:${NC}"
        if [ "$critical" -gt 0 ]; then
            echo -e "${RED}● HIGH RISK - Critical vulnerabilities present${NC}"
        elif [ "$high" -gt 5 ]; then
            echo -e "${YELLOW}● MEDIUM RISK - Multiple high severity issues${NC}"
        else
            echo -e "${GREEN}● LOW RISK - No critical issues${NC}"
        fi
        
        # Recommendations
        echo -e "\n${BOLD}Recommendations:${NC}"
        echo -e "1. Address $critical critical vulnerabilities immediately"
        echo -e "2. Schedule fixes for $high high severity issues"
        echo -e "3. Review exploitability analysis for prioritization"
        echo -e "4. Implement automated scanning in CI/CD pipeline"
    fi
    
    # Generate HTML report
    echo -e "\n${CYAN}Generating enhanced HTML report...${NC}"
    if [ -f "$FILTERED_DIR/production-filtered.json" ]; then
        python scripts/create_elegant_report.py \
            "$FILTERED_DIR/production-filtered.json" \
            "$ANALYTICS_DIR/executive-dashboard.html" 2>/dev/null
        echo -e "${GREEN}✓ Executive dashboard created:${NC} $ANALYTICS_DIR/executive-dashboard.html"
    fi
}

# Main execution
main() {
    setup_demo
    
    while true; do
        show_menu
        read -r choice
        
        case $choice in
            1) scenario_production ;;
            2) scenario_compliance ;;
            3) scenario_triage ;;
            4) scenario_exploitability ;;
            5) scenario_cicd ;;
            6) scenario_delta ;;
            7) 
                scenario_production
                scenario_compliance
                scenario_triage
                scenario_exploitability
                scenario_cicd
                scenario_delta
                generate_summary
                ;;
            8) generate_summary ;;
            0) 
                echo -e "\n${GREEN}Thank you for using the Enhanced Vulnerability Filter Demo!${NC}"
                exit 0
                ;;
            *) echo -e "${RED}Invalid option. Please try again.${NC}" ;;
        esac
    done
}

# Run the demo
main