#!/bin/bash
# Aqua Splunk Integration Demo Script
# This script demonstrates how Aqua vulnerability data can be optimized for Splunk
# Usage: ./demo.sh

set -e  # Exit on any error
DEMO_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPTS_DIR="$DEMO_DIR/scripts"
DEMO_DATA_DIR="$DEMO_DIR/demo-data"
REPORT_DIR="$DEMO_DATA_DIR/reports"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Create directories
mkdir -p "$DEMO_DATA_DIR/reports/original"
mkdir -p "$DEMO_DATA_DIR/reports/filtered"
mkdir -p "$DEMO_DATA_DIR/reports/previous"

# Copy report if it exists, otherwise use a message
if [ -f "$DEMO_DIR/../Aqua-Reports/aqua-scan.json" ]; then
    cp "$DEMO_DIR/../Aqua-Reports/aqua-scan.json" "$DEMO_DATA_DIR/reports/original/"
elif [ -f "$DEMO_DIR/examples/input/aqua-scan.json" ]; then
    cp "$DEMO_DIR/examples/input/aqua-scan.json" "$DEMO_DATA_DIR/reports/original/"
else
    echo -e "${RED}No sample report found. Please add an Aqua scan report at $DEMO_DATA_DIR/reports/original/aqua-scan.json${NC}"
    exit 1
fi

clear
echo -e "${BLUE}===============================================================${NC}"
echo -e "${BLUE}          AQUA SECURITY SPLUNK INTEGRATION DEMO               ${NC}"
echo -e "${BLUE}===============================================================${NC}"
echo
echo -e "${GREEN}This demo shows how to optimize Aqua Security vulnerability data${NC}"
echo -e "${GREEN}for Splunk ingestion to address common challenges:${NC}"
echo
echo -e " • ${YELLOW}Large payloads${NC} exceeding Splunk HEC limits"
echo -e " • ${YELLOW}Complex nested structures${NC} causing parsing issues"
echo -e " • ${YELLOW}Excessive data volume${NC} consuming Splunk license"
echo -e " • ${YELLOW}Indexing performance issues${NC} with large scan results"
echo
echo -e "${BLUE}Press Enter to continue...${NC}"
read

echo
echo -e "${BLUE}===============================================================${NC}"
echo -e "${BLUE}                    DEMO 1: SEVERITY FILTERING                ${NC}"
echo -e "${BLUE}===============================================================${NC}"
echo
echo -e "${GREEN}Let's filter the Aqua scan results to only include high-severity vulnerabilities (CVSS ≥ 7.0)${NC}"
echo -e "${GREEN}This dramatically reduces the data volume while keeping critical security issues.${NC}"
echo

# Run the severity filtering
python3 "$SCRIPTS_DIR/filter_for_splunk.py" \
    "$DEMO_DATA_DIR/reports/original/aqua-scan.json" \
    "$DEMO_DATA_DIR/reports/filtered/severity-filtered.json" \
    --min-severity 7.0

# Get statistics for display
TOTAL_VULNS=$(jq -r '.filtering_summary.total_vulnerabilities' "$DEMO_DATA_DIR/reports/filtered/severity-filtered_summary.json")
INCLUDED_VULNS=$(jq -r '.filtering_summary.vulnerabilities_included' "$DEMO_DATA_DIR/reports/filtered/severity-filtered_summary.json")
REDUCTION=$(jq -r '.filtering_summary.size_reduction.reduction_percentage' "$DEMO_DATA_DIR/reports/filtered/severity-filtered_summary.json")

echo
echo -e "${GREEN}Results:${NC}"
echo -e " • Original vulnerabilities: ${YELLOW}$TOTAL_VULNS${NC}"
echo -e " • High-severity vulnerabilities (CVSS ≥ 7.0): ${YELLOW}$INCLUDED_VULNS${NC}"
echo -e " • Data volume reduction: ${YELLOW}$REDUCTION%${NC}"
echo
echo -e "${BLUE}Press Enter to continue to the next demo...${NC}"
read

# For delta demo, create both a "previous" report and a "new" report with an added vulnerability
echo
echo -e "${BLUE}===============================================================${NC}"
echo -e "${BLUE}                  DEMO 2: DELTA REPORTING                     ${NC}"
echo -e "${BLUE}===============================================================${NC}"
echo
echo -e "${GREEN}Now let's demonstrate delta reporting to show only NEW vulnerabilities${NC}"
echo -e "${GREEN}This helps focus attention on emerging security issues only.${NC}"
echo

# For demo purposes, we'll create a simple "previous" report
echo -e "${GREEN}Creating a simulated previous scan report...${NC}"
# Copy the original report for this demo
cp "$DEMO_DATA_DIR/reports/original/aqua-scan.json" "$DEMO_DATA_DIR/reports/previous/previous-scan.json"

# Create a new report with an extra "demo" vulnerability
echo -e "${GREEN}Creating a simulated new scan with an added vulnerability...${NC}"
cat > "$DEMO_DATA_DIR/reports/original/new-vulnerability.json" << EOL
{
  "name": "CVE-2025-DEMO-001",
  "type": "vulnerability",
  "description": "This is a simulated new vulnerability for demo purposes. It represents a critical security issue that would be found in a new scan.",
  "publish_date": "2025-05-19",
  "fix_version": "1.2.3",
  "solution": "Upgrade to the newest version to resolve this critical security issue",
  "nvd_score_v3": 9.8,
  "nvd_vectors_v3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "nvd_severity_v3": "critical",
  "aqua_score": 9.8,
  "aqua_severity": "critical",
  "aqua_vectors": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
}
EOL

# Add this to the first resource in the scan
jq --slurpfile newvuln "$DEMO_DATA_DIR/reports/original/new-vulnerability.json" '.resources[0].vulnerabilities += $newvuln' \
  "$DEMO_DATA_DIR/reports/original/aqua-scan.json" > "$DEMO_DATA_DIR/reports/original/new-scan.json"

# Run the delta filtering
echo -e "${GREEN}Running delta comparison...${NC}"
python3 "$SCRIPTS_DIR/filter_for_splunk.py" \
    "$DEMO_DATA_DIR/reports/original/new-scan.json" \
    "$DEMO_DATA_DIR/reports/filtered/delta-filtered.json" \
    --min-severity 7.0 \
    --delta-only \
    --previous-scan "$DEMO_DATA_DIR/reports/previous/previous-scan.json"

# Get statistics for display
TOTAL_VULNS=$(jq -r '.filtering_summary.total_vulnerabilities' "$DEMO_DATA_DIR/reports/filtered/delta-filtered_summary.json")
INCLUDED_VULNS=$(jq -r '.filtering_summary.vulnerabilities_included' "$DEMO_DATA_DIR/reports/filtered/delta-filtered_summary.json")

echo
echo -e "${GREEN}Results:${NC}"
echo -e " • Total vulnerabilities in new scan: ${YELLOW}$TOTAL_VULNS${NC}"
echo -e " • New vulnerabilities detected: ${YELLOW}$INCLUDED_VULNS${NC}"
echo

# Show the details of the simulated new vulnerability
echo -e "${GREEN}New Vulnerability Details:${NC}"
echo -e "  • ${YELLOW}CVE: CVE-2025-DEMO-001${NC}"
echo -e "  • ${YELLOW}Severity: Critical (CVSS 9.8)${NC}"
echo -e "  • ${YELLOW}Description: Simulated critical vulnerability for demo purposes${NC}"
echo -e "  • ${YELLOW}Solution: Upgrade to newest version${NC}"
echo
echo -e "${BLUE}Press Enter to continue to the next demo...${NC}"
read

echo
echo -e "${BLUE}===============================================================${NC}"
echo -e "${BLUE}                  DEMO 3: SPLUNK EVENT FORMAT                 ${NC}"
echo -e "${BLUE}===============================================================${NC}"
echo
echo -e "${GREEN}Let's examine how our solution formats vulnerability data for Splunk${NC}"
echo -e "${GREEN}Each vulnerability becomes a separate event with flattened structure.${NC}"
echo

echo -e "${YELLOW}Sample Event:${NC}"
head -n1 "$DEMO_DATA_DIR/reports/filtered/severity-filtered_splunk.json" | jq

echo
echo -e "${GREEN}Benefits:${NC}"
echo -e " • ${YELLOW}Flat structure${NC} - No complex nesting"
echo -e " • ${YELLOW}One event per vulnerability${NC} - Easy to analyze in Splunk"
echo -e " • ${YELLOW}Normalized fields${NC} - Consistent data format"
echo -e " • ${YELLOW}Key data only${NC} - Irrelevant fields removed"
echo
echo -e "${BLUE}Press Enter to view summary...${NC}"
read

echo
echo -e "${BLUE}===============================================================${NC}"
echo -e "${BLUE}                       DEMO SUMMARY                           ${NC}"
echo -e "${BLUE}===============================================================${NC}"
echo
echo -e "${GREEN}The Aqua-Splunk Integration Benefits:${NC}"
echo
echo -e " 1. ${YELLOW}Dramatic Data Reduction${NC} - ${REDUCTION}% smaller payloads"
echo -e " 2. ${YELLOW}Focus on Critical Issues${NC} - Only high-severity vulnerabilities"
echo -e " 3. ${YELLOW}Delta Reporting${NC} - Only report new vulnerabilities"
echo -e " 4. ${YELLOW}Splunk-Optimized Format${NC} - Flat, searchable events"
echo -e " 5. ${YELLOW}License Efficiency${NC} - Reduced Splunk license consumption"
echo
echo -e "${GREEN}Implementation Options:${NC}"
echo -e " • ${YELLOW}CI/CD Integration${NC} - Add to automated workflows"
echo -e " • ${YELLOW}Scheduled Jobs${NC} - Run periodically to sync data"
echo -e " • ${YELLOW}API Triggered${NC} - Run when new scans complete"
echo
echo -e "${BLUE}Commands to integrate with Splunk:${NC}"
echo -e "${YELLOW}python3 scripts/filter_for_splunk.py scan.json filtered.json --min-severity 7.0${NC}"
echo -e "${YELLOW}python3 scripts/send_to_splunk.py filtered_splunk.json --hec-url <URL> --token <TOKEN>${NC}"
echo
echo -e "${BLUE}===============================================================${NC}"
echo -e "${GREEN}Demo Complete - Thank You!${NC}"
echo -e "${BLUE}===============================================================${NC}"
echo
echo -e "${YELLOW}Want to see more advanced features?${NC}"
echo -e "Try the enhanced demo with high/critical filtering:"
echo -e "${GREEN}./demo-enhanced.sh${NC}"
echo
echo -e "Or run a quick high/critical filter:"
echo -e "${GREEN}./examples/demo_high_critical.sh${NC}" 