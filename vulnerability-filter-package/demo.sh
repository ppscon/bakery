#!/bin/bash
# Aqua Splunk Integration Demo Script
# This script demonstrates how Aqua vulnerability data can be optimized for Splunk
# Usage: ./demo.sh

set -e  # Exit on any error

DEMO_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPTS_DIR="$DEMO_DIR/scripts"
DEMO_DATA_DIR="$DEMO_DIR/demo-data"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
GRAY='\033[0;90m'
BOLD='\033[1m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Create directories
mkdir -p "$DEMO_DATA_DIR/reports/original"
mkdir -p "$DEMO_DATA_DIR/reports/filtered"
mkdir -p "$DEMO_DATA_DIR/reports/previous"

# Copy report if it exists, otherwise use a message
if [ -f "$DEMO_DIR/../Aqua-Reports/aqua-scan.json" ]; then
    cp "$DEMO_DIR/../Aqua-Reports/aqua-scan.json" "$DEMO_DATA_DIR/reports/original/"
elif [ -f "$DEMO_DIR/examples/input/aqua-scan.json" ]; then
    cp "$DEMO_DIR/examples/input/aqua-scan.json" "$DEMO_DATA_DIR/reports/original/"
else
    echo -e "${RED}No sample report found. Please add an Aqua scan report at $DEMO_DATA_DIR/reports/original/aqua-scan.json${NC}"
    exit 1
fi

clear
echo -e "${BLUE}===============================================================${NC}"
echo -e "${BLUE}          AQUA SECURITY SPLUNK INTEGRATION DEMO               ${NC}"
echo -e "${BLUE}===============================================================${NC}"
echo
echo -e "${GREEN}This demo shows how to optimize Aqua Security vulnerability data${NC}"
echo -e "${GREEN}for Splunk ingestion to address common challenges:${NC}"
echo
echo -e " • ${YELLOW}Large payloads${NC} exceeding Splunk HEC limits"
echo -e " • ${YELLOW}Complex nested structures${NC} causing parsing issues"
echo -e " • ${YELLOW}Excessive data volume${NC} consuming Splunk license"
echo -e " • ${YELLOW}Indexing performance issues${NC} with large scan results"
echo
echo -e "${BLUE}Press Enter to continue...${NC}"
read -r

# Add smooth transition
clear
echo -e "${BLUE}===============================================================${NC}"
echo -e "${BLUE}                    DEMO 1: SEVERITY FILTERING                ${NC}"
echo -e "${BLUE}===============================================================${NC}"
echo
echo -e "${GREEN}Let's filter the Aqua scan results to only include high-severity vulnerabilities (CVSS ≥ 7.0)${NC}"
echo -e "${GREEN}This dramatically reduces the data volume while keeping critical security issues.${NC}"
echo

# Show processing indicator
echo -ne "${CYAN}Processing vulnerability data${NC}"
for i in {1..3}; do
    sleep 0.3
    echo -ne "."
done
echo ""

# Run the severity filtering with progress
echo -ne "${YELLOW}▸ Analyzing vulnerabilities${NC} "
python3 "$SCRIPTS_DIR/filter_for_splunk.py" \
    "$DEMO_DATA_DIR/reports/original/aqua-scan.json" \
    "$DEMO_DATA_DIR/reports/filtered/severity-filtered.json" \
    --min-severity 7.0 2>/dev/null &
PID=$!

# Animated progress bar
echo -ne "["
while kill -0 $PID 2>/dev/null; do
    echo -ne "${GREEN}▓${NC}"
    sleep 0.1
done
echo -e "] ${GREEN}✓ Complete${NC}"
wait $PID

# Get statistics for display
echo -ne "\n${CYAN}▸ Calculating results${NC}"
TOTAL_VULNS=$(jq -r '.filtering_summary.total_vulnerabilities' "$DEMO_DATA_DIR/reports/filtered/severity-filtered_summary.json" 2>/dev/null || echo "0")
INCLUDED_VULNS=$(jq -r '.filtering_summary.vulnerabilities_included' "$DEMO_DATA_DIR/reports/filtered/severity-filtered_summary.json" 2>/dev/null || echo "0")
REDUCTION=$(jq -r '.filtering_summary.size_reduction.reduction_percentage' "$DEMO_DATA_DIR/reports/filtered/severity-filtered_summary.json" 2>/dev/null || echo "0")
echo -e " ${GREEN}✓${NC}"

# Progressive display of results
echo
echo -e "${GREEN}Results:${NC}"
sleep 0.3
echo -ne " • Original vulnerabilities: "
sleep 0.2
echo -e "${YELLOW}$TOTAL_VULNS${NC}"
sleep 0.3
echo -ne " • High-severity vulnerabilities (CVSS ≥ 7.0): "
sleep 0.2
echo -e "${YELLOW}$INCLUDED_VULNS${NC}"
sleep 0.3
echo -ne " • Data volume reduction: "
sleep 0.2
echo -e "${YELLOW}$REDUCTION%${NC}"

# Add visual impact bar
echo
if [ "$REDUCTION" != "0" ]; then
    echo -ne "${GREEN}Impact: ${NC}["
    # Convert to integer for arithmetic
    REDUCTION_INT=$(echo "$REDUCTION" | cut -d. -f1)
    BARS=$((REDUCTION_INT / 5))
    for ((i=0; i<BARS; i++)); do
        echo -ne "${GREEN}▓${NC}"
        sleep 0.05
    done
    for ((i=BARS; i<20; i++)); do
        echo -ne "${GRAY}░${NC}"
    done
    echo -e "] ${GREEN}${REDUCTION}% reduction${NC}"
fi

echo
echo -e "${BLUE}Press Enter to continue to the next demo...${NC}"
read -r

# For delta demo, create both a "previous" report and a "new" report with an added vulnerability
clear
echo -e "${BLUE}===============================================================${NC}"
echo -e "${BLUE}                  DEMO 2: DELTA REPORTING                     ${NC}"
echo -e "${BLUE}===============================================================${NC}"
echo
echo -e "${GREEN}Now let's demonstrate delta reporting to show only NEW vulnerabilities${NC}"
echo -e "${GREEN}This helps focus attention on emerging security issues only.${NC}"
echo

# For demo purposes, we'll create a simple "previous" report
echo -ne "${CYAN}▸ Setting up simulation${NC} "
# Copy the original report for this demo
cp "$DEMO_DATA_DIR/reports/original/aqua-scan.json" "$DEMO_DATA_DIR/reports/previous/previous-scan.json"
echo -ne "${GREEN}✓${NC}\n"
sleep 0.3

# Create a new report with an extra "demo" vulnerability
echo -ne "${CYAN}▸ Injecting new vulnerability for demonstration${NC} "
cat > "$DEMO_DATA_DIR/reports/original/new-vulnerability.json" << EOL
{
  "name": "CVE-2025-DEMO-001",
  "type": "vulnerability",
  "description": "This is a simulated new vulnerability for demo purposes. It represents a critical security issue that would be found in a new scan.",
  "publish_date": "2025-05-19",
  "fix_version": "1.2.3",
  "solution": "Upgrade to the newest version to resolve this critical security issue",
  "nvd_score_v3": 9.8,
  "nvd_vectors_v3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "nvd_severity_v3": "critical",
  "aqua_score": 9.8,
  "aqua_severity": "critical",
  "aqua_vectors": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
}
EOL

# Add this to the first resource in the scan
jq --slurpfile newvuln "$DEMO_DATA_DIR/reports/original/new-vulnerability.json" '.resources[0].vulnerabilities += $newvuln' \
  "$DEMO_DATA_DIR/reports/original/aqua-scan.json" > "$DEMO_DATA_DIR/reports/original/new-scan.json" 2>/dev/null
echo -e "${GREEN}✓${NC}"
sleep 0.3

# Run the delta filtering
echo -ne "${YELLOW}▸ Performing delta analysis${NC} "
python3 "$SCRIPTS_DIR/filter_for_splunk.py" \
    "$DEMO_DATA_DIR/reports/original/new-scan.json" \
    "$DEMO_DATA_DIR/reports/filtered/delta-filtered.json" \
    --min-severity 7.0 \
    --delta-only \
    --previous-scan "$DEMO_DATA_DIR/reports/previous/previous-scan.json" 2>/dev/null &
PID=$!

# Animated progress
echo -ne "["
while kill -0 $PID 2>/dev/null; do
    echo -ne "${YELLOW}▓${NC}"
    sleep 0.1
done
echo -e "] ${GREEN}✓ Complete${NC}"
wait $PID

# Get statistics for display
echo -ne "\n${CYAN}▸ Analyzing delta results${NC}"
TOTAL_VULNS=$(jq -r '.filtering_summary.total_vulnerabilities' "$DEMO_DATA_DIR/reports/filtered/delta-filtered_summary.json" 2>/dev/null || echo "0")
INCLUDED_VULNS=$(jq -r '.filtering_summary.vulnerabilities_included' "$DEMO_DATA_DIR/reports/filtered/delta-filtered_summary.json" 2>/dev/null || echo "0")
echo -e " ${GREEN}✓${NC}"

echo
echo -e "${GREEN}Results:${NC}"
sleep 0.3
echo -ne " • Total vulnerabilities in new scan: "
sleep 0.2
echo -e "${YELLOW}$TOTAL_VULNS${NC}"
sleep 0.3
echo -ne " • New vulnerabilities detected: "
sleep 0.2
echo -e "${YELLOW}$INCLUDED_VULNS${NC}"
echo

# Show the details of the simulated new vulnerability with animation
sleep 0.3
echo -e "${GREEN}New Vulnerability Details:${NC}"
sleep 0.2
echo -ne "  • ${YELLOW}CVE: ${NC}"
sleep 0.2
echo -e "${YELLOW}CVE-2025-DEMO-001${NC}"
sleep 0.2
echo -ne "  • ${YELLOW}Severity: ${NC}"
sleep 0.2
echo -e "${RED}Critical (CVSS 9.8)${NC}"
sleep 0.2
echo -ne "  • ${YELLOW}Description: ${NC}"
sleep 0.2
echo -e "Simulated critical vulnerability for demo purposes"
sleep 0.2
echo -ne "  • ${YELLOW}Solution: ${NC}"
sleep 0.2
echo -e "Upgrade to newest version"

# Add alert animation for critical finding
echo
if [ "$INCLUDED_VULNS" -gt 0 ]; then
    for i in {1..2}; do
        echo -ne "\r${RED}⚠  ALERT: New critical vulnerability detected!${NC}"
        sleep 0.3
        echo -ne "\r${YELLOW}⚠  ALERT: New critical vulnerability detected!${NC}"
        sleep 0.3
    done
    echo -ne "\r${RED}⚠  ALERT: New critical vulnerability detected!${NC}"
    echo
fi

echo
echo -e "${BLUE}Press Enter to continue to the next demo...${NC}"
read -r

clear
echo -e "${BLUE}===============================================================${NC}"
echo -e "${BLUE}                  DEMO 3: SPLUNK EVENT FORMAT                 ${NC}"
echo -e "${BLUE}===============================================================${NC}"
echo
echo -e "${GREEN}Let's examine how our solution formats vulnerability data for Splunk${NC}"
echo -e "${GREEN}Each vulnerability becomes a separate event with flattened structure.${NC}"
echo

# Show processing
echo -ne "${CYAN}▸ Loading Splunk event format${NC}"
sleep 0.5
echo -e " ${GREEN}✓${NC}"
echo

echo -e "${YELLOW}Sample Event:${NC}"
sleep 0.3

# Display JSON with progressive reveal
if [ -f "$DEMO_DATA_DIR/reports/filtered/severity-filtered_splunk.json" ]; then
    echo -e "${CYAN}{"
    head -n1 "$DEMO_DATA_DIR/reports/filtered/severity-filtered_splunk.json" | jq -r 'to_entries[:5] | .[] | "  \"\(.key)\": \"\(.value)\","' | while IFS= read -r line; do
        echo -e "${CYAN}$line${NC}"
        sleep 0.1
    done
    echo -e "${CYAN}  ...${NC}"
    echo -e "${CYAN}}${NC}"
fi

echo
sleep 0.5
echo -e "${GREEN}Benefits:${NC}"
sleep 0.3
echo -ne " • ${YELLOW}Flat structure${NC}"
sleep 0.3
echo -e " - No complex nesting"
sleep 0.3
echo -ne " • ${YELLOW}One event per vulnerability${NC}"
sleep 0.3
echo -e " - Easy to analyze in Splunk"
sleep 0.3
echo -ne " • ${YELLOW}Normalized fields${NC}"
sleep 0.3
echo -e " - Consistent data format"
sleep 0.3
echo -ne " • ${YELLOW}Key data only${NC}"
sleep 0.3
echo -e " - Irrelevant fields removed"

# Add visualization
echo
echo -ne "${GREEN}Event Structure: ${NC}"
echo -ne "["
for i in {1..10}; do
    echo -ne "${CYAN}▓${NC}"
    sleep 0.05
done
echo -e "] ${GREEN}Optimized for Splunk${NC}"

echo
echo -e "${BLUE}Press Enter to view summary...${NC}"
read -r

clear
echo -e "${BLUE}===============================================================${NC}"
echo -e "${BLUE}                       DEMO SUMMARY                           ${NC}"
echo -e "${BLUE}===============================================================${NC}"
echo

# Add gray color for better visual hierarchy
GRAY='\033[0;90m'

# Animated title
echo -ne "${GREEN}The Aqua-Splunk Integration Benefits"
for i in {1..3}; do
    echo -ne "."
    sleep 0.2
done
echo -e "${NC}\n"

# Progressive reveal of benefits with icons
sleep 0.3
echo -ne " 1. ${YELLOW}Dramatic Data Reduction${NC} "
sleep 0.3
echo -e "- ${GREEN}${REDUCTION}%${NC} smaller payloads"

sleep 0.3
echo -ne " 2. ${YELLOW}Focus on Critical Issues${NC} "
sleep 0.3
echo -e "- Only high-severity vulnerabilities"

sleep 0.3
echo -ne " 3. ${YELLOW}Delta Reporting${NC} "
sleep 0.3
echo -e "- Only report new vulnerabilities"

sleep 0.3
echo -ne " 4. ${YELLOW}Splunk-Optimized Format${NC} "
sleep 0.3
echo -e "- Flat, searchable events"

sleep 0.3
echo -ne " 5. ${YELLOW}License Efficiency${NC} "
sleep 0.3
echo -e "- Reduced Splunk license consumption"

echo
sleep 0.5
echo -e "${GREEN}Implementation Options:${NC}"
sleep 0.3
echo -e " • ${YELLOW}CI/CD Integration${NC} - Add to automated workflows"
sleep 0.3
echo -e " • ${YELLOW}Scheduled Jobs${NC} - Run periodically to sync data"
sleep 0.3
echo -e " • ${YELLOW}API Triggered${NC} - Run when new scans complete"

echo
sleep 0.5
echo -e "${BLUE}Commands to integrate with Splunk:${NC}"
echo -e "${GRAY}# Filter vulnerabilities${NC}"
echo -e "${YELLOW}python3 scripts/filter_for_splunk.py scan.json filtered.json --min-severity 7.0${NC}"
echo -e "${GRAY}# Send to Splunk HEC${NC}"
echo -e "${YELLOW}python3 scripts/send_to_splunk.py filtered_splunk.json --hec-url <URL> --token <TOKEN>${NC}"

echo
# Final animation
echo -ne "${GREEN}"
for i in {1..60}; do
    echo -ne "="
    sleep 0.02
done
echo -e "${NC}"
echo -e "${GREEN}Demo Complete - Thank You!${NC}"
echo -ne "${GREEN}"
for i in {1..60}; do
    echo -ne "="
    sleep 0.02
done
echo -e "${NC}"

echo
echo -e "${YELLOW}Want to see more advanced features?${NC}"
sleep 0.3
echo -e "Try the enhanced demo with ${BOLD}high/critical filtering${NC}:"
echo -e "${GREEN}./demo-enhanced.sh${NC}"
echo
echo -e "Or run a ${BOLD}quick high/critical filter${NC}:"
echo -e "${GREEN}./examples/demo_high_critical.sh${NC}" 